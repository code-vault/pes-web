--- START OF FILE: ./app/global-error.tsx ---
'use client'

import { useEffect } from 'react'
import { AlertTriangle, RefreshCw, Home } from 'lucide-react'
import Link from 'next/link'

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error('Global error:', error)
  }, [error])

  return (
    <html>
      <body>
        <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-50 flex items-center justify-center p-4">
          <div className="max-w-md w-full">
            <div className="bg-white rounded-2xl shadow-xl p-8 text-center">
              <div className="mb-6">
                <div className="bg-red-100 rounded-full p-4 w-16 h-16 mx-auto mb-4">
                  <AlertTriangle className="h-8 w-8 text-red-600" />
                </div>
                <h1 className="text-2xl font-bold text-gray-900 mb-2">
                  Something went wrong!
                </h1>
                <p className="text-gray-600">
                  We encountered an unexpected error. This has been logged and we&apos;re working to fix it.
                </p>
              </div>

              <div className="space-y-4">
                <button
                  onClick={reset}
                  className="w-full bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 flex items-center justify-center"
                >
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Try again
                </button>

                <Link
                  href="/"
                  className="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold py-3 px-6 rounded-lg transition-all duration-300 flex items-center justify-center"
                >
                  <Home className="h-4 w-4 mr-2" />
                  Go home
                </Link>
              </div>

              <div className="mt-8 pt-6 border-t border-gray-200">
                <details className="text-left">
                  <summary className="text-sm text-gray-500 cursor-pointer hover:text-gray-700">
                    Technical Details
                  </summary>
                  <div className="mt-2 p-3 bg-gray-50 rounded text-xs text-gray-600 font-mono">
                    {error.message}
                    {error.digest && (
                      <div className="mt-1">
                        Error ID: {error.digest}
                      </div>
                    )}
                  </div>
                </details>
              </div>

              <div className="mt-6 text-sm text-gray-500">
                Need help? Contact us at{' '}
                <a href="mailto:support@purvodayaenergy.com" className="text-orange-600 hover:text-orange-700">
                  support@purvodayaenergy.com
                </a>
              </div>
            </div>
          </div>
        </div>
      </body>
    </html>
  )
}
--- END OF FILE: ./app/global-error.tsx ---


--- START OF FILE: ./app/icon.tsx ---
import { ImageResponse } from 'next/og'

// Route segment config
export const runtime = 'edge'

// Image metadata
export const size = {
  width: 32,
  height: 32,
}
export const contentType = 'image/png'

// Image generation
export default function Icon() {
  return new ImageResponse(
    (
      <div
        style={{
          fontSize: 24,
          background: 'linear-gradient(135deg, #f97316 0%, #f59e0b 100%)',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          color: 'white',
          borderRadius: 4,
        }}
      >
        ☀️
      </div>
    ),
    {
      ...size,
    }
  )
}
--- END OF FILE: ./app/icon.tsx ---


--- START OF FILE: ./app/manifest.ts ---
import { MetadataRoute } from 'next'

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: 'Purvodaya Energy Solutions',
    short_name: 'Purvodaya Solar',
    description: 'Premium solar solutions for residential, commercial, and industrial needs',
    start_url: '/',
    display: 'standalone',
    background_color: '#ffffff',
    theme_color: '#f97316',
    icons: [
      {
        src: '/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png',
      },
      {
        src: '/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png',
      },
    ],
  }
}
--- END OF FILE: ./app/manifest.ts ---


--- START OF FILE: ./app/robots.ts ---
import { MetadataRoute } from 'next';

export default function robots(): MetadataRoute.Robots {
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://yoursite.com';
  
  return {
    rules: [
      {
        userAgent: '*',
        allow: '/',
        disallow: [
          '/api/',
          '/_next/',
          '/admin/',
          '*.json',
          '/private/',
        ],
      },
      {
        userAgent: 'GPTBot',
        disallow: '/',
      },
      {
        userAgent: 'ChatGPT-User',
        disallow: '/',
      },
    ],
    sitemap: `${baseUrl}/sitemap.xml`,
    host: baseUrl,
  };
}
--- END OF FILE: ./app/robots.ts ---


--- START OF FILE: ./app/sitemap.ts ---
import { MetadataRoute } from 'next';

export default function sitemap(): MetadataRoute.Sitemap {
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://yoursite.com';
  const lastModified = new Date();
  
  const routes = [
    '',
    '/about',
    '/services', 
    '/gallery',
    '/testimonials',
    '/faq',
    '/contact',
  ];

  const locales = ['en', 'hi'];
  
  const sitemap: MetadataRoute.Sitemap = [];
  
  // Add all routes for each locale
  locales.forEach(locale => {
    routes.forEach(route => {
      sitemap.push({
        url: `${baseUrl}/${locale}${route}`,
        lastModified,
        changeFrequency: route === '' ? 'daily' : 'weekly',
        priority: route === '' ? 1 : 0.8,
        alternates: {
          languages: {
            en: `${baseUrl}/en${route}`,
            hi: `${baseUrl}/hi${route}`,
          },
        },
      });
    });
  });

  return sitemap;
}
--- END OF FILE: ./app/sitemap.ts ---


--- START OF FILE: ./app/[locale]/about/page.tsx ---
"use client";
import { Award, Users, Zap, Leaf, CheckCircle, ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Link } from '@/i18n/navigation';
import { useTranslations } from 'next-intl';
import ScrollReveal from '@/components/ScrollReveal';
import { useState, useEffect, useRef } from 'react';

// Number animation hook for stats counter
const useCountUp = (end: number, duration: number = 2500, delay: number = 0) => {
  const [count, setCount] = useState(0);
  const [hasStarted, setHasStarted] = useState(false);

  useEffect(() => {
    if (!hasStarted) return;

    const timer = setTimeout(() => {
      let startTime: number;
      const animate = (currentTime: number) => {
        if (!startTime) startTime = currentTime;
        const progress = Math.min((currentTime - startTime) / duration, 1);
        
        const easeOutCubic = 1 - Math.pow(1 - progress, 3);
        setCount(Math.floor(easeOutCubic * end));
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        }
      };
      requestAnimationFrame(animate);
    }, delay);

    return () => clearTimeout(timer);
  }, [end, duration, delay, hasStarted]);

  return { count, start: () => setHasStarted(true) };
};

// Intersection Observer hook for stats counter
const useIntersectionObserver = (threshold: number = 0.1) => {
  const [isIntersecting, setIsIntersecting] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsIntersecting(true);
        }
      },
      { threshold }
    );

    if (ref.current) {
      observer.observe(ref.current);
    }

    return () => observer.disconnect();
  }, [threshold]);

  return { ref, isIntersecting };
};

const AboutPage = () => {
  const t = useTranslations('aboutPage');
  
  // Only keep intersection observer for stats counter
  const { ref: statsRef, isIntersecting: statsVisible } = useIntersectionObserver(0.3);
  
  // Stats data with numbers
  const stats = [
    { icon: Users, number: 2500, suffix: "+", label: t('stats.customers'), gradient: "from-blue-500 to-cyan-500" },
    { icon: Zap, number: 15, suffix: "MW+", label: t('stats.installed'), gradient: "from-orange-500 to-amber-500" },
    { icon: Award, number: 12, suffix: "+", label: t('stats.experience'), gradient: "from-purple-500 to-violet-500" },
    { icon: Leaf, number: 50, suffix: "M+", label: t('stats.co2Saved'), gradient: "from-green-500 to-emerald-500" }
  ];

  // Number animations for stats
  const customersCount = useCountUp(2500, 2000, 200);
  const installedCount = useCountUp(15, 1500, 400);
  const experienceCount = useCountUp(12, 1000, 600);
  const co2Count = useCountUp(50, 1800, 800);

  const counts = [customersCount, installedCount, experienceCount, co2Count];

  // Start animations when stats become visible
  useEffect(() => {
    if (statsVisible) {
      counts.forEach(counter => counter.start());
    }
  }, [statsVisible]);

  // Format numbers
  const formatNumber = (num: number, index: number): string => {
    if (index === 0) return new Intl.NumberFormat('en-IN').format(num); // customers
    return num.toString(); // others
  };

  const highlights = [
    {
      icon: CheckCircle,
      title: t('highlights.0.title'),
      description: t('highlights.0.description')
    },
    {
      icon: CheckCircle,
      title: t('highlights.1.title'),
      description: t('highlights.1.description')
    },
    {
      icon: CheckCircle,
      title: t('highlights.2.title'),
      description: t('highlights.2.description')
    },
    {
      icon: CheckCircle,
      title: t('highlights.3.title'),
      description: t('highlights.3.description')
    }
  ];

  const timeline = [
    { year: "2012", title: t('timeline.0.title'), description: t('timeline.0.description') },
    { year: "2015", title: t('timeline.1.title'), description: t('timeline.1.description') },
    { year: "2018", title: t('timeline.2.title'), description: t('timeline.2.description') },
    { year: "2021", title: t('timeline.3.title'), description: t('timeline.3.description') },
    { year: "2024", title: t('timeline.4.title'), description: t('timeline.4.description') }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-orange-50 pt-32 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-20 w-[500px] h-[500px] bg-gradient-to-r from-orange-400/10 to-amber-400/10 rounded-full blur-3xl animate-pulse-slow"></div>
        <div className="absolute bottom-20 right-20 w-[600px] h-[600px] bg-gradient-to-r from-blue-400/10 to-cyan-400/10 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">
        {/* Header with ScrollReveal */}
        <div className="mb-12">
          <ScrollReveal direction="up" delay={100}>
            <Link href="/">
              <Button variant="outline" className="mb-6">
                <ArrowLeft className="mr-2 h-4 w-4" />
                {t('backToHome')}
              </Button>
            </Link>
          </ScrollReveal>

          <ScrollReveal direction="up" delay={300}>
            <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6 tracking-tight">
              {t('title')}
            </h1>
          </ScrollReveal>

          <ScrollReveal direction="up" delay={500}>
            <p className="text-xl text-gray-600 max-w-3xl leading-relaxed">
              {t('subtitle')}
            </p>
          </ScrollReveal>
        </div>

        {/* Stats Section with ScrollReveal */}
        <ScrollReveal direction="up" delay={700}>
          <div 
            ref={statsRef}
            className="grid grid-cols-2 lg:grid-cols-4 gap-6 mb-16"
          >
            {stats.map((stat, index) => (
              <div key={index} className="bg-white/60 backdrop-blur-xl rounded-2xl p-6 shadow-xl text-center">
                <div className={`bg-gradient-to-br ${stat.gradient} w-12 h-12 rounded-xl flex items-center justify-center mx-auto mb-4`}>
                  <stat.icon className="h-6 w-6 text-white" />
                </div>
                <div className="text-3xl font-bold text-gray-900 mb-2">
                  {formatNumber(counts[index].count, index)}{stat.suffix}
                </div>
                <div className="text-gray-600 font-medium">{stat.label}</div>
              </div>
            ))}
          </div>
        </ScrollReveal>

        {/* Story Section with ScrollReveal */}
        <ScrollReveal direction="up" delay={900}>
          <div className="mb-16">
            <h2 className="text-3xl font-bold text-gray-900 mb-8">{t('ourStory')}</h2>
            <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-8 shadow-xl">
              <ScrollReveal direction="up" delay={1100}>
                <p className="text-lg text-gray-700 leading-relaxed mb-6">
                  {t('story.paragraph1')}
                </p>
              </ScrollReveal>
              <ScrollReveal direction="up" delay={1300}>
                <p className="text-lg text-gray-700 leading-relaxed mb-6">
                  {t('story.paragraph2')}
                </p>
              </ScrollReveal>
              <ScrollReveal direction="up" delay={1500}>
                <p className="text-lg text-gray-700 leading-relaxed">
                  {t('story.paragraph3')}
                </p>
              </ScrollReveal>
            </div>
          </div>
        </ScrollReveal>

        {/* Timeline with ScrollReveal */}
        <ScrollReveal direction="up" delay={1100}>
          <div className="mb-16">
            <h2 className="text-3xl font-bold text-gray-900 mb-8">{t('ourJourney')}</h2>
            <div className="space-y-8">
              {timeline.map((milestone, index) => (
                <ScrollReveal
                  key={index}
                  direction="right"
                  delay={1300 + (index * 200)}
                >
                  <div className="flex items-start space-x-6">
                    <div className="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-4 py-2 rounded-lg font-bold">
                      {milestone.year}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-xl font-semibold text-gray-900 mb-2">{milestone.title}</h3>
                      <p className="text-gray-600">{milestone.description}</p>
                    </div>
                  </div>
                </ScrollReveal>
              ))}
            </div>
          </div>
        </ScrollReveal>

        {/* Highlights with ScrollReveal */}
        <ScrollReveal direction="up" delay={1700}>
          <div>
            <h2 className="text-3xl font-bold text-gray-900 mb-8">{t('whyChooseUs')}</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {highlights.map((highlight, index) => (
                <ScrollReveal
                  key={index}
                  direction="scale"
                  delay={1900 + (index * 150)}
                >
                  <div className="flex items-start space-x-4 p-6 bg-white/60 backdrop-blur-sm rounded-xl shadow-lg">
                    <div className="bg-gradient-to-br from-green-400 to-emerald-500 p-3 rounded-lg flex-shrink-0">
                      <highlight.icon className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-2 text-lg">{highlight.title}</h4>
                      <p className="text-gray-600">{highlight.description}</p>
                    </div>
                  </div>
                </ScrollReveal>
              ))}
            </div>
          </div>
        </ScrollReveal>
      </div>
    </div>
  );
};

export default AboutPage;
--- END OF FILE: ./app/[locale]/about/page.tsx ---


--- START OF FILE: ./app/[locale]/api/contact/route.ts ---
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import sgMail from '@sendgrid/mail';

// Initialize SendGrid
if (process.env.SENDGRID_API_KEY) {
  sgMail.setApiKey(process.env.SENDGRID_API_KEY);
}

type RouteContext = {
  params: Promise<{ locale: string }>;
};

interface ContactFormData {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address: string;
  bill?: string;
  additional?: string;
  submittedAt: string;
  language: string;
  source: string;
}

// Validation functions
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

const validatePhone = (phone: string): boolean => {
  const phoneRegex = /^(\+91|91)?[\s-]?[6-9]\d{9}$/;
  return phoneRegex.test(phone.replace(/[\s-]/g, ''));
};

const sanitizeInput = (input: string): string => {
  return input.trim().replace(/[<>]/g, '');
};

// Email Templates
const getAdminEmailTemplate = (formData: ContactFormData) => {
  const isHindi = formData.language === 'hi';
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>${isHindi ? 'नई सोलर इंक्वायरी' : 'New Solar Inquiry'}</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background: linear-gradient(135deg, #f97316, #f59e0b); color: white; padding: 20px; text-align: center; }
            .content { padding: 20px; background: #f9fafb; }
            .info-card { background: white; padding: 15px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .label { font-weight: bold; color: #374151; }
            .value { color: #6b7280; margin-left: 10px; }
            .priority { background: #fef2f2; border: 1px solid #fecaca; padding: 15px; border-radius: 8px; margin: 20px 0; }
            .footer { text-align: center; padding: 20px; color: #6b7280; font-size: 14px; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>🌞 ${isHindi ? 'नई सोलर इंक्वायरी!' : 'New Solar Inquiry!'}</h1>
            <p>${isHindi ? 'एक नया ग्राहक सोलर इंस्टॉलेशन में रुचि रखता है' : 'A new customer is interested in solar installation'}</p>
        </div>
        
        <div class="content">
            <div class="priority">
                <h3>⚡ ${isHindi ? 'तुरंत फॉलो-अप करें!' : 'Follow up immediately!'}</h3>
                <p>${isHindi ? 'यह एक गर्म लीड है - 24 घंटे के भीतर संपर्क करें' : 'This is a warm lead - contact within 24 hours'}</p>
            </div>
            
            <div class="info-card">
                <h3>${isHindi ? 'ग्राहक जानकारी' : 'Customer Information'}</h3>
                <p><span class="label">${isHindi ? 'नाम:' : 'Name:'}</span><span class="value">${formData.firstName} ${formData.lastName}</span></p>
                <p><span class="label">${isHindi ? 'ईमेल:' : 'Email:'}</span><span class="value">${formData.email}</span></p>
                <p><span class="label">${isHindi ? 'फोन:' : 'Phone:'}</span><span class="value">${formData.phone}</span></p>
                <p><span class="label">${isHindi ? 'पता:' : 'Address:'}</span><span class="value">${formData.address}</span></p>
            </div>
            
            <div class="info-card">
                <h3>${isHindi ? 'परियोजना विवरण' : 'Project Details'}</h3>
                <p><span class="label">${isHindi ? 'मासिक बिल:' : 'Monthly Bill:'}</span><span class="value">${formData.bill || (isHindi ? 'प्रदान नहीं किया गया' : 'Not provided')}</span></p>
                <p><span class="label">${isHindi ? 'अतिरिक्त जानकारी:' : 'Additional Info:'}</span><span class="value">${formData.additional || (isHindi ? 'कोई नहीं' : 'None')}</span></p>
                <p><span class="label">${isHindi ? 'भाषा प्राथमिकता:' : 'Language Preference:'}</span><span class="value">${formData.language === 'hi' ? 'हिंदी' : 'English'}</span></p>
            </div>
            
            <div class="info-card">
                <h3>${isHindi ? 'सबमिशन विवरण' : 'Submission Details'}</h3>
                <p><span class="label">${isHindi ? 'सबमिट किया गया:' : 'Submitted:'}</span><span class="value">${new Date(formData.submittedAt).toLocaleString()}</span></p>
                <p><span class="label">${isHindi ? 'स्रोत:' : 'Source:'}</span><span class="value">${formData.source}</span></p>
            </div>
        </div>
        
        <div class="footer">
            <p>${isHindi ? 'पूर्वोदय एनर्जी सॉल्यूशंस - लीड मैनेजमेंट सिस्टम' : 'Purvodaya Energy Solutions - Lead Management System'}</p>
        </div>
    </body>
    </html>
  `;
};

const getCustomerEmailTemplate = (formData: ContactFormData) => {
  const isHindi = formData.language === 'hi';
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>${isHindi ? 'आपकी सोलर इंक्वायरी प्राप्त हुई' : 'Your Solar Inquiry Received'}</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background: linear-gradient(135deg, #f97316, #f59e0b); color: white; padding: 30px; text-align: center; }
            .content { padding: 30px; background: #f9fafb; }
            .welcome { background: white; padding: 20px; border-radius: 12px; margin: 20px 0; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            .next-steps { background: #ecfdf5; border: 1px solid #10b981; padding: 20px; border-radius: 12px; margin: 20px 0; }
            .contact-info { background: white; padding: 20px; border-radius: 12px; margin: 20px 0; }
            .footer { text-align: center; padding: 20px; color: #6b7280; }
            .button { display: inline-block; background: linear-gradient(135deg, #f97316, #f59e0b); color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 10px 5px; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>🌞 ${isHindi ? 'धन्यवाद, ' + formData.firstName + '!' : 'Thank you, ' + formData.firstName + '!'}</h1>
            <p>${isHindi ? 'आपकी सोलर इंक्वायरी सफलतापूर्वक प्राप्त हुई है' : 'Your solar inquiry has been successfully received'}</p>
        </div>
        
        <div class="content">
            <div class="welcome">
                <h2>${isHindi ? 'आपकी सौर यात्रा शुरू हो गई है!' : 'Your Solar Journey Begins!'}</h2>
                <p>${isHindi ? 
                  'हमें खुशी है कि आपने स्वच्छ, नवीकरणीय ऊर्जा में रुचि दिखाई है। हमारी विशेषज्ञ टीम आपकी आवश्यकताओं के अनुसार एक कस्टम सोलर समाधान तैयार करेगी।' : 
                  'We\'re excited that you\'re interested in clean, renewable energy. Our expert team will prepare a custom solar solution tailored to your needs.'
                }</p>
            </div>
            
            <div class="next-steps">
                <h3>📋 ${isHindi ? 'अगले कदम:' : 'Next Steps:'}</h3>
                <ul>
                    <li>${isHindi ? '✅ आपकी जानकारी की समीक्षा (1-2 घंटे)' : '✅ Review your information (1-2 hours)'}</li>
                    <li>${isHindi ? '📞 हमारे विशेषज्ञ आपको कॉल करेंगे (24 घंटे के भीतर)' : '📞 Our expert will call you (within 24 hours)'}</li>
                    <li>${isHindi ? '🏠 मुफ्त साइट सर्वे शेड्यूल करना' : '🏠 Schedule free site survey'}</li>
                    <li>${isHindi ? '💰 कस्टम कोटेशन तैयार करना' : '💰 Prepare custom quotation'}</li>
                </ul>
            </div>
            
            <div class="contact-info">
                <h3>${isHindi ? 'तुरंत सहायता चाहिए?' : 'Need Immediate Assistance?'}</h3>
                <p>${isHindi ? 'हमसे संपर्क करने में संकोच न करें:' : 'Don\'t hesitate to contact us:'}</p>
                
                <a href="tel:+919876543210" class="button">📞 ${isHindi ? 'अभी कॉल करें' : 'Call Now'}</a>
                <a href="https://wa.me/919876543210" class="button">💬 WhatsApp</a>
                
                <p style="margin-top: 20px;">
                    <strong>${isHindi ? 'फोन:' : 'Phone:'}</strong> +91 98765 43210<br>
                    <strong>${isHindi ? 'ईमेल:' : 'Email:'}</strong> info@purvodayaenergy.com<br>
                    <strong>${isHindi ? 'समय:' : 'Hours:'}</strong> ${isHindi ? 'सोमवार-शनिवार 9AM-6PM' : 'Mon-Sat 9AM-6PM'}
                </p>
            </div>
        </div>
        
        <div class="footer">
            <p>${isHindi ? 'धन्यवाद,' : 'Thank you,'}<br>
            <strong>${isHindi ? 'पूर्वोदय एनर्जी सॉल्यूशंस टीम' : 'Purvodaya Energy Solutions Team'}</strong></p>
            <p style="font-size: 12px; color: #9ca3af;">
                ${isHindi ? 'यह एक स्वचालित ईमेल है। कृपया इसका उत्तर न दें।' : 'This is an automated email. Please do not reply.'}
            </p>
        </div>
    </body>
    </html>
  `;
};

// Send emails function
async function sendEmails(formData: ContactFormData) {
  if (!process.env.SENDGRID_API_KEY) {
    console.log('SendGrid not configured, skipping email send');
    return;
  }

  const adminEmail = {
    to: process.env.EMAIL_TO || 'leads@purvodayaenergy.com',
    from: process.env.EMAIL_FROM || 'noreply@purvodayaenergy.com',
    subject: `🌞 New Solar Lead: ${formData.firstName} ${formData.lastName} (${formData.bill ? formData.bill + ' monthly bill' : 'No bill info'})`,
    html: getAdminEmailTemplate(formData)
  };

  const customerEmail = {
    to: formData.email,
    from: process.env.EMAIL_FROM || 'noreply@purvodayaenergy.com',
    subject: formData.language === 'hi' 
      ? `धन्यवाद ${formData.firstName}! आपकी सोलर इंक्वायरी प्राप्त हुई` 
      : `Thank you ${formData.firstName}! Your Solar Inquiry Received`,
    html: getCustomerEmailTemplate(formData)
  };

  try {
    // Send admin notification
    await sgMail.send(adminEmail);
    console.log('Admin notification sent successfully');

    // Send customer confirmation
    await sgMail.send(customerEmail);
    console.log('Customer confirmation sent successfully');

  } catch (emailError) {
    console.error('Email sending failed:', emailError);
    // Don't throw error - we don't want to fail the API call if email fails
  }
}

// Main API handler
export async function POST(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const { locale } = await context.params;
    
    // Parse the request body
    const rawData = await request.json();
    
    // Validate required fields
    const requiredFields = ['firstName', 'lastName', 'email', 'phone', 'address'];
    const missingFields = requiredFields.filter(field => !rawData[field]?.trim());
    
    if (missingFields.length > 0) {
      return NextResponse.json(
        { 
          message: locale === 'hi' 
            ? `निम्नलिखित फ़ील्ड आवश्यक हैं: ${missingFields.join(', ')}`
            : `Missing required fields: ${missingFields.join(', ')}`,
          error: 'VALIDATION_ERROR',
          missingFields
        }, 
        { status: 400 }
      );
    }

    // Validate email format
    if (!validateEmail(rawData.email)) {
      return NextResponse.json(
        { 
          message: locale === 'hi' 
            ? 'कृपया एक वैध ईमेल पता दर्ज करें'
            : 'Please enter a valid email address',
          error: 'INVALID_EMAIL'
        }, 
        { status: 400 }
      );
    }

    // Validate phone format
    if (!validatePhone(rawData.phone)) {
      return NextResponse.json(
        { 
          message: locale === 'hi' 
            ? 'कृपया एक वैध फोन नंबर दर्ज करें'
            : 'Please enter a valid phone number',
          error: 'INVALID_PHONE'
        }, 
        { status: 400 }
      );
    }

    // Sanitize and structure the form data
    const formData: ContactFormData = {
      firstName: sanitizeInput(rawData.firstName),
      lastName: sanitizeInput(rawData.lastName),
      email: sanitizeInput(rawData.email),
      phone: sanitizeInput(rawData.phone),
      address: sanitizeInput(rawData.address),
      bill: rawData.bill ? sanitizeInput(rawData.bill) : '',
      additional: rawData.additional ? sanitizeInput(rawData.additional) : '',
      submittedAt: rawData.submittedAt || new Date().toISOString(),
      language: locale,
      source: rawData.source || 'website_contact_form'
    };

    console.log('Contact form submission received:', {
      name: `${formData.firstName} ${formData.lastName}`,
      email: formData.email,
      phone: formData.phone,
      language: formData.language,
      timestamp: formData.submittedAt
    });

    // Send emails (admin notification + customer confirmation)
    await sendEmails(formData);

    // Success response
    return NextResponse.json({ 
      message: locale === 'hi' 
        ? `धन्यवाद ${formData.firstName}! आपका संदेश सफलतापूर्वक प्राप्त हुआ है। हमारी टीम 24 घंटे के भीतर आपसे संपर्क करेगी।`
        : `Thank you ${formData.firstName}! Your message has been received successfully. Our team will contact you within 24 hours.`,
      success: true,
      data: {
        submissionId: `PES-${Date.now()}`,
        estimatedResponseTime: '24 hours'
      }
    });

  } catch (mainError) {
    console.error('Contact API Error:', mainError);
    
    const url = new URL(request.url);
    const locale = url.pathname.includes('/hi/') ? 'hi' : 'en';
    
    return NextResponse.json({ 
      message: locale === 'hi'
        ? 'क्षमा करें, एक तकनीकी समस्या हुई है। कृपया पुनः प्रयास करें या हमें +91 98765 43210 पर कॉल करें।'
        : 'Sorry, there was a technical issue. Please try again or call us at +91 98765 43210.',
      error: 'INTERNAL_SERVER_ERROR'
    }, { status: 500 });
  }
}

// Health check endpoint
export async function GET(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const { locale } = await context.params;
    
    return NextResponse.json({
      status: 'ok',
      message: locale === 'hi' ? 'संपर्क API कार्यरत है' : 'Contact API is working',
      emailConfigured: !!process.env.SENDGRID_API_KEY,
      timestamp: new Date().toISOString()
    });
  } catch (healthError) {
    console.error('Health check error:', healthError);
    return NextResponse.json({
      status: 'error',
      message: 'API health check failed'
    }, { status: 500 });
  }
}
--- END OF FILE: ./app/[locale]/api/contact/route.ts ---


--- START OF FILE: ./app/[locale]/api/regenerate-translations/route.ts ---
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const webhookSecret = request.headers.get('webhook-secret');
    if (webhookSecret !== process.env.SANITY_WEBHOOK_SECRET) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    
    if (body._type === 'translation') {
      console.log('🔄 Translation updated, regenerating files...');
      
      return NextResponse.json({ 
        success: true, 
        message: 'Translations updated',
        timestamp: new Date().toISOString()
      });
    }

    return NextResponse.json({ message: 'No action needed' });
    
  } catch (error) {
    console.error('Error regenerating translations:', error);
    return NextResponse.json(
      { error: 'Failed to regenerate translations' }, 
      { status: 500 }
    );
  }
}
--- END OF FILE: ./app/[locale]/api/regenerate-translations/route.ts ---


--- START OF FILE: ./app/[locale]/error.tsx ---
'use client'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center">
        <h2 className="text-2xl font-bold mb-4">Something went wrong!</h2>
        <button onClick={reset} className="bg-orange-500 text-white px-4 py-2 rounded">
          Try again
        </button>
      </div>
    </div>
  )
}
--- END OF FILE: ./app/[locale]/error.tsx ---


--- START OF FILE: ./app/[locale]/faq/page.tsx ---
"use client";
import { useState } from 'react';
import { ArrowLeft, ChevronDown, ChevronUp, HelpCircle, Phone, Mail } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Link } from '@/i18n/navigation';
import { useTranslations } from 'next-intl';
import ScrollReveal from '@/components/ScrollReveal';

export default function FAQPage() {
  const t = useTranslations('faqPage');
  const [openItems, setOpenItems] = useState<number[]>([0]); // First item open by default

  const toggleItem = (index: number) => {
    setOpenItems(prev => 
      prev.includes(index) 
        ? prev.filter(i => i !== index)
        : [...prev, index]
    );
  };

  // FAQ Data from translations
  const faqData = Array.from({ length: 8 }, (_, i) => ({
    question: t(`questions.${i}.question`),
    answer: t(`questions.${i}.answer`)
  }));

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-orange-50 pt-32 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-1/4 w-96 h-96 bg-gradient-to-r from-orange-400/10 to-amber-400/10 rounded-full blur-3xl animate-pulse-slow"></div>
        <div className="absolute bottom-20 right-1/4 w-72 h-72 bg-gradient-to-r from-blue-400/10 to-cyan-400/10 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
      </div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">
        {/* Header with ScrollReveal */}
        <div className="mb-12">
          <ScrollReveal direction="up" delay={100}>
            <Link href="/">
              <Button variant="outline" className="mb-6">
                <ArrowLeft className="mr-2 h-4 w-4" />
                {t('backToHome')}
              </Button>
            </Link>
          </ScrollReveal>
          
          <div className="text-center">
            <ScrollReveal direction="up" delay={300}>
              <div className="inline-flex items-center px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-orange-200/50 shadow-lg mb-6">
                <HelpCircle className="h-5 w-5 text-orange-500 mr-2" />
                <span className="text-sm font-semibold text-orange-600">
                  {t('badge')}
                </span>
              </div>
            </ScrollReveal>

            <ScrollReveal direction="up" delay={500}>
              <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6 tracking-tight">
                {t('title')}
              </h1>
            </ScrollReveal>

            <ScrollReveal direction="up" delay={700}>
              <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
                {t('subtitle')}
              </p>
            </ScrollReveal>
          </div>
        </div>

        {/* FAQ Items with ScrollReveal */}
        <div className="space-y-4 mb-12">
          {faqData.map((item, index) => (
            <ScrollReveal 
              key={index}
              direction="up" 
              delay={900 + (index * 100)}
            >
              <div className="bg-white/60 backdrop-blur-sm rounded-2xl border border-white/20 shadow-xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
                <button
                  onClick={() => toggleItem(index)}
                  className="w-full px-8 py-6 text-left focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-opacity-50 transition-all duration-200"
                  aria-expanded={openItems.includes(index)}
                >
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-semibold text-gray-900 pr-4">
                      {item.question}
                    </h3>
                    <div className="flex-shrink-0">
                      {openItems.includes(index) ? (
                        <ChevronUp className="h-6 w-6 text-orange-500 transition-transform duration-200" />
                      ) : (
                        <ChevronDown className="h-6 w-6 text-gray-400 transition-transform duration-200" />
                      )}
                    </div>
                  </div>
                </button>
                
                <div
                  className={`overflow-hidden transition-all duration-300 ease-in-out ${
                    openItems.includes(index) ? 'max-h-[1000px] opacity-100' : 'max-h-0 opacity-0'
                  }`}
                >
                  <div className="px-8 pb-6">
                    <div className="border-t border-gray-200/50 pt-4">
                      <p className="text-gray-600 leading-relaxed whitespace-pre-line">
                        {item.answer}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </ScrollReveal>
          ))}
        </div>

        {/* Contact Section with ScrollReveal */}
        <ScrollReveal direction="up" delay={1500}>
          <div className="text-center">
            <div className="bg-gradient-to-r from-orange-500 to-amber-500 rounded-2xl p-8 text-white">
              <h3 className="text-2xl font-bold mb-4">{t('contact.title')}</h3>
              <p className="text-orange-100 mb-6 text-lg">
                {t('contact.description')}
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button 
                  onClick={() => window.location.href = 'tel:+919876543210'}
                  className="bg-white text-orange-600 hover:bg-orange-50 transition-all duration-300 transform hover:scale-105 shadow-lg"
                >
                  <Phone className="mr-2 h-4 w-4" />
                  {t('contact.callExpert')}
                </Button>
                <Button 
                  onClick={() => window.location.href = 'mailto:info@purvodayaenergy.com?subject=Solar Installation Inquiry'}
                  className="bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white border-0 transition-all duration-300"
                >
                  <Mail className="mr-2 h-4 w-4" />
                  {t('contact.emailUs')}
                </Button>
              </div>
            </div>
          </div>
        </ScrollReveal>
      </div>
    </div>
  );
}
--- END OF FILE: ./app/[locale]/faq/page.tsx ---


--- START OF FILE: ./app/[locale]/gallery/page.tsx ---
"use client";
import { useState } from 'react';
import { Play, X, ChevronLeft, ChevronRight, Maximize, ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Link } from '@/i18n/navigation';
import { useTranslations } from 'next-intl';
import ScrollReveal from '@/components/ScrollReveal';

const GalleryPage = () => {
  const t = useTranslations('galleryPage');
  const [selectedMedia, setSelectedMedia] = useState<{type: 'image' | 'video', src: string, title: string} | null>(null);
  const [currentIndex, setCurrentIndex] = useState(0);

  // Base media items from translations
  const baseMediaItems = [
    {
      type: 'image' as const,
      src: 'https://images.unsplash.com/photo-1508514177221-188b1cf16e9d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      thumbnail: 'https://images.unsplash.com/photo-1508514177221-188b1cf16e9d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: t('projects.0.title'),
      category: t('projects.0.category')
    },
    {
      type: 'video' as const,
      src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',
      thumbnail: 'https://images.unsplash.com/photo-1466611653911-95081537e5b7?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: t('projects.1.title'),
      category: t('projects.1.category')
    },
    {
      type: 'image' as const,
      src: 'https://images.unsplash.com/photo-1559302504-64aae6ca6909?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      thumbnail: 'https://images.unsplash.com/photo-1559302504-64aae6ca6909?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: t('projects.2.title'),
      category: t('projects.2.category')
    },
    {
      type: 'image' as const,
      src: 'https://images.unsplash.com/photo-1509391366360-2e959784a276?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      thumbnail: 'https://images.unsplash.com/photo-1509391366360-2e959784a276?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: t('projects.3.title'),
      category: t('projects.3.category')
    },
    {
      type: 'video' as const,
      src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4',
      thumbnail: 'https://images.unsplash.com/photo-1497440001374-f26997328c1b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: t('projects.4.title'),
      category: t('projects.4.category')
    },
    {
      type: 'image' as const,
      src: 'https://images.unsplash.com/photo-1513107990900-ed83fbe91e72?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      thumbnail: 'https://images.unsplash.com/photo-1513107990900-ed83fbe91e72?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: t('projects.5.title'),
      category: t('projects.5.category')
    }
  ];

  // Additional media items from translations
  const additionalMediaItems = Array.from({ length: 12 }, (_, i) => ({
    type: 'image' as const,
    src: `https://images.unsplash.com/photo-${1500000000000 + i}?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80`,
    thumbnail: `https://images.unsplash.com/photo-${1500000000000 + i}?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80`,
    title: t(`additionalProjects.${i}.title`),
    category: t(`additionalProjects.${i}.category`)
  }));

  // Combine all media items
  const mediaItems = [...baseMediaItems, ...additionalMediaItems];

  const openLightbox = (item: typeof mediaItems[0], index: number) => {
    setSelectedMedia(item);
    setCurrentIndex(index);
  };

  const closeLightbox = () => {
    setSelectedMedia(null);
  };

  const goToPrevious = () => {
    const newIndex = currentIndex > 0 ? currentIndex - 1 : mediaItems.length - 1;
    setCurrentIndex(newIndex);
    setSelectedMedia(mediaItems[newIndex]);
  };

  const goToNext = () => {
    const newIndex = currentIndex < mediaItems.length - 1 ? currentIndex + 1 : 0;
    setCurrentIndex(newIndex);
    setSelectedMedia(mediaItems[newIndex]);
  };

  return (
    <>
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-800 pt-32 relative overflow-hidden">
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-20 left-1/4 w-96 h-96 bg-gradient-to-r from-orange-400/20 to-amber-400/20 rounded-full blur-3xl animate-pulse-slow"></div>
          <div className="absolute bottom-20 right-1/4 w-72 h-72 bg-gradient-to-r from-blue-400/20 to-cyan-400/20 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">
          {/* Header with ScrollReveal */}
          <div className="mb-8">
            <ScrollReveal direction="up" delay={100}>
              <Link href="/">
                <Button variant="outline" className="mb-6 bg-white/10 border-white/20 text-white hover:bg-white/20">
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  {t('backToHome')}
                </Button>
              </Link>
            </ScrollReveal>

            <ScrollReveal direction="up" delay={300}>
              <h1 className="text-4xl md:text-6xl font-bold text-white mb-6 tracking-tight">
                {t('title')}
              </h1>
            </ScrollReveal>

            <ScrollReveal direction="up" delay={500}>
              <p className="text-xl text-gray-300 max-w-3xl leading-relaxed">
                {t('subtitle')}
              </p>
            </ScrollReveal>
          </div>

          {/* Gallery Grid with ScrollReveal */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {mediaItems.map((item, index) => (
              <ScrollReveal
                key={index}
                direction="scale"
                delay={700 + (index * 100)}
              >
                <div 
                  className="group relative cursor-pointer transform transition-all duration-500 hover:scale-105 hover:z-10"
                  onClick={() => openLightbox(item, index)}
                >
                  <div className="relative overflow-hidden rounded-2xl shadow-2xl border border-white/20 backdrop-blur-sm bg-white/5">
                    <div className="aspect-[4/3] overflow-hidden">
                      <img
                        src={item.thumbnail}
                        alt={item.title}
                        className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                      />
                    </div>
                    
                    <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                      <div className="text-center transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                        {item.type === 'video' ? (
                          <Play className="h-12 w-12 text-white mx-auto mb-2" />
                        ) : (
                          <Maximize className="h-12 w-12 text-white mx-auto mb-2" />
                        )}
                        <p className="text-white font-semibold">{item.title}</p>
                        <p className="text-gray-300 text-sm">{item.category}</p>
                      </div>
                    </div>

                    <div className="absolute top-4 right-4">
                      <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                        item.type === 'video' 
                          ? 'bg-red-500/80 text-white' 
                          : 'bg-blue-500/80 text-white'
                      } backdrop-blur-sm`}>
                        {item.type === 'video' ? t('video') : t('photo')}
                      </span>
                    </div>

                    <div className="absolute top-4 left-4">
                      <span className="px-3 py-1 rounded-full text-xs font-semibold bg-orange-500/80 text-white backdrop-blur-sm">
                        {item.category}
                      </span>
                    </div>
                  </div>
                </div>
              </ScrollReveal>
            ))}
          </div>
        </div>
      </div>

      {/* Lightbox Modal with enhanced animations */}
      {selectedMedia && (
        <div className="fixed inset-0 z-50 bg-black/95 backdrop-blur-md flex items-center justify-center p-4 animate-fade-in">
          <Button
            onClick={closeLightbox}
            variant="ghost"
            size="icon"
            className="absolute top-4 right-4 z-60 text-white hover:bg-white/20 h-12 w-12"
          >
            <X className="h-6 w-6" />
          </Button>

          <Button
            onClick={goToPrevious}
            variant="ghost"
            size="icon"
            className="absolute left-4 top-1/2 -translate-y-1/2 z-60 text-white hover:bg-white/20 h-12 w-12"
          >
            <ChevronLeft className="h-6 w-6" />
          </Button>

          <Button
            onClick={goToNext}
            variant="ghost"
            size="icon"
            className="absolute right-4 top-1/2 -translate-y-1/2 z-60 text-white hover:bg-white/20 h-12 w-12"
          >
            <ChevronRight className="h-6 w-6" />
          </Button>

          <div className="max-w-6xl max-h-[90vh] w-full h-full flex items-center justify-center">
            {selectedMedia.type === 'image' ? (
              <img
                src={selectedMedia.src}
                alt={selectedMedia.title}
                className="max-w-full max-h-full object-contain rounded-lg shadow-2xl animate-scale-in"
              />
            ) : (
              <video
                src={selectedMedia.src}
                controls
                autoPlay
                className="max-w-full max-h-full rounded-lg shadow-2xl animate-scale-in"
              >
                {t('videoNotSupported')}
              </video>
            )}
          </div>

          <div className="absolute bottom-8 left-1/2 -translate-x-1/2 text-center">
            <h3 className="text-white text-xl font-semibold mb-2">{selectedMedia.title}</h3>
            <p className="text-gray-300 text-sm">
              {t('imageCounter', { current: currentIndex + 1, total: mediaItems.length })}
            </p>
          </div>
        </div>
      )}
    </>
  );
};

export default GalleryPage;
--- END OF FILE: ./app/[locale]/gallery/page.tsx ---


--- START OF FILE: ./app/[locale]/layout.tsx ---
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import {NextIntlClientProvider} from 'next-intl';
import {getMessages} from 'next-intl/server';
import {notFound} from 'next/navigation';
import {setRequestLocale} from 'next-intl/server';

// Your shared layout components
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import FloatingClickToCall from '@/components/FloatingClickToCall';

// Toast Provider
import { ToastProvider } from '@/components/ui/toast';

// Font optimization
const inter = Inter({ 
  subsets: ['latin'],
  display: 'swap', // Improves font loading performance
  preload: true
});

type Props = {
  children: React.ReactNode;
  params: Promise<{locale: string}>;
};

// Generate static params for both locales
export function generateStaticParams() {
  return [{locale: 'en'}, {locale: 'hi'}];
}

// Dynamic metadata based on locale
// Dynamic metadata based on locale
export async function generateMetadata({params}: Props): Promise<Metadata> {
  const {locale} = await params;
  const messages = await getMessages({locale});
  const metadata = messages.metadata as Record<string, string>;
  
  return {
    title: {
      template: `%s | ${locale === 'hi' ? 'पूर्वोदय एनर्जी सॉल्यूशंस' : 'Purvodaya Energy Solutions'}`,
      default: metadata.title,
    },
    description: metadata.description,
    viewport: 'width=device-width, initial-scale=1, shrink-to-fit=no',
    robots: 'index, follow',
    icons: {
      icon: '/favicon.ico',
      shortcut: '/favicon-16x16.png',
      apple: '/apple-touch-icon.png',
    },
    manifest: '/manifest.json',
  };
}

// This is the Root Layout Component
export default async function LocaleLayout({
  children,
  params
}: Props) {
  const {locale} = await params;
  
  // Validate that the incoming `locale` parameter is valid
  const locales = ['en', 'hi'];
  if (!locales.includes(locale)) {
    notFound();
  }

  // Enable static rendering
  setRequestLocale(locale);

  // Providing all messages to the client
  const messages = await getMessages({locale});

  return (
    <html lang={locale} dir="ltr">
      <head>
        {/* Preload critical resources */}
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="" />
        
        {/* DNS prefetch for external domains */}
        <link rel="dns-prefetch" href="https://images.unsplash.com" />
        <link rel="dns-prefetch" href="https://img.youtube.com" />
      </head>
      <body className={inter.className}>
        <NextIntlClientProvider messages={messages}>
          {/* WRAP EVERYTHING WITH TOASTPROVIDER */}
          <ToastProvider>
            {/* This UI is shared across ALL pages */}
            <Header />

            <main>
              {children}
            </main>
            
            {/* This UI is also shared across ALL pages */}
            <Footer />

            {/* Floating Click-to-Call Button - appears on all pages */}
            <FloatingClickToCall />
          </ToastProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
--- END OF FILE: ./app/[locale]/layout.tsx ---


--- START OF FILE: ./app/[locale]/not-found.tsx ---
import Link from 'next/link'

export default function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center">
        <h2 className="text-2xl font-bold mb-4">Page Not Found</h2>
        <p className="mb-4">Could not find the requested page.</p>
        <Link href="/" className="bg-orange-500 text-white px-4 py-2 rounded">
          Return Home
        </Link>
      </div>
    </div>
  )
}
--- END OF FILE: ./app/[locale]/not-found.tsx ---


--- START OF FILE: ./app/[locale]/page.tsx ---
import {setRequestLocale} from 'next-intl/server';
import Hero from '@/components/Hero';
import Services from '@/components/Services';
import About from '@/components/About';
import Gallery from '@/components/Gallery';
import UnifiedTestimonials from '@/components/Testimonials';
import SimpleCenteredContact from '@/components/SplitLayoutContact';

type Props = {
  params: Promise<{locale: string}>;
};

// This is the functional component that defines the UI for the '/' route.
export default async function HomePage({params}: Props) {
  const {locale} = await params;
  
  // Enable static rendering
  setRequestLocale(locale);

  return (
    // We use a React Fragment <> because the main layout is already handled
    // by the <body> and <main> tags in app/[locale]/layout.tsx.
    <>
      <Hero />
      <Services />
      <About />
      <Gallery />
      
      {/* Unified Testimonials with Text and Video Carousel */}
      <UnifiedTestimonials />
      
      {/* FAQ Section */}
      {/* <FAQSection /> */}
      
      {/* Updated Mobile-Optimized Contact Form */}
      <SimpleCenteredContact />
    </>
  );
}
--- END OF FILE: ./app/[locale]/page.tsx ---


--- START OF FILE: ./app/[locale]/services/page.tsx ---
import { Home, Building, Factory, Wrench, Calculator, HeadphonesIcon, ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import {Link} from '@/i18n/navigation';
import { useTranslations } from 'next-intl';
import ScrollReveal from '@/components/ScrollReveal';

const ServicesPage = () => {
  const t = useTranslations('servicesPage');

  const services = [
    {
      Icon: Home,
      title: t('services.0.title'),
      description: t('services.0.description'),
      features: [
        t('services.0.features.0'),
        t('services.0.features.1'),
        t('services.0.features.2'),
        t('services.0.features.3')
      ],
      gradient: "from-blue-500 to-cyan-500",
      detailedDescription: t('services.0.detailedDescription')
    },
    {
      Icon: Building,
      title: t('services.1.title'),
      description: t('services.1.description'),
      features: [
        t('services.1.features.0'),
        t('services.1.features.1'),
        t('services.1.features.2'),
        t('services.1.features.3')
      ],
      gradient: "from-green-500 to-emerald-500",
      detailedDescription: t('services.1.detailedDescription')
    },
    {
      Icon: Factory,
      title: t('services.2.title'),
      description: t('services.2.description'),
      features: [
        t('services.2.features.0'),
        t('services.2.features.1'),
        t('services.2.features.2'),
        t('services.2.features.3')
      ],
      gradient: "from-purple-500 to-violet-500",
      detailedDescription: t('services.2.detailedDescription')
    },
    {
      Icon: Calculator,
      title: t('services.3.title'),
      description: t('services.3.description'),
      features: [
        t('services.3.features.0'),
        t('services.3.features.1'),
        t('services.3.features.2'),
        t('services.3.features.3')
      ],
      gradient: "from-orange-500 to-red-500",
      detailedDescription: t('services.3.detailedDescription')
    },
    {
      Icon: Wrench,
      title: t('services.4.title'),
      description: t('services.4.description'),
      features: [
        t('services.4.features.0'),
        t('services.4.features.1'),
        t('services.4.features.2'),
        t('services.4.features.3')
      ],
      gradient: "from-teal-500 to-cyan-500",
      detailedDescription: t('services.4.detailedDescription')
    },
    {
      Icon: HeadphonesIcon,
      title: t('services.5.title'),
      description: t('services.5.description'),
      features: [
        t('services.5.features.0'),
        t('services.5.features.1'),
        t('services.5.features.2'),
        t('services.5.features.3')
      ],
      gradient: "from-indigo-500 to-blue-500",
      detailedDescription: t('services.5.detailedDescription')
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white pt-32 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-1/4 w-96 h-96 bg-gradient-to-r from-orange-400/10 to-amber-400/10 rounded-full blur-3xl animate-pulse-slow"></div>
        <div className="absolute bottom-20 right-1/4 w-72 h-72 bg-gradient-to-r from-blue-400/10 to-cyan-400/10 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">
        {/* Header with ScrollReveal */}
        <div className="mb-8">
          <ScrollReveal direction="up" delay={100}>
            <Link href="/">
              <Button variant="outline" className="mb-6">
                <ArrowLeft className="mr-2 h-4 w-4" />
                {t('backToHome')}
              </Button>
            </Link>
          </ScrollReveal>

          <ScrollReveal direction="up" delay={300}>
            <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6 tracking-tight">
              {t('title')}
            </h1>
          </ScrollReveal>

          <ScrollReveal direction="up" delay={500}>
            <p className="text-xl text-gray-600 max-w-3xl leading-relaxed">
              {t('subtitle')}
            </p>
          </ScrollReveal>
        </div>

        {/* Services Grid with ScrollReveal */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {services.map((service, index) => (
            <ScrollReveal
              key={index}
              direction="scale"
              delay={700 + (index * 150)}
            >
              <Card className="group hover:shadow-2xl transition-all duration-500 border-0 bg-white/80 backdrop-blur-sm hover:-translate-y-2">
                <CardHeader className="pb-4">
                  <div className={`bg-gradient-to-br ${service.gradient} w-16 h-16 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg`}>
                    <service.Icon className="h-8 w-8 text-white" />
                  </div>
                  <CardTitle className="text-2xl text-gray-900">{service.title}</CardTitle>
                  <CardDescription className="text-gray-600 text-base leading-relaxed mb-4">
                    {service.description}
                  </CardDescription>
                  <p className="text-gray-700 leading-relaxed">
                    {service.detailedDescription}
                  </p>
                </CardHeader>
                <CardContent>
                  <h4 className="font-semibold text-gray-900 mb-4">{t('whatsIncluded')}</h4>
                  <ul className="space-y-3">
                    {service.features.map((feature: string, featureIndex: number) => (
                      <li key={featureIndex} className="flex items-center text-gray-700">
                        <div className={`w-2 h-2 bg-gradient-to-r ${service.gradient} rounded-full mr-4 shadow-sm`}></div>
                        <span className="font-medium">{feature}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </ScrollReveal>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ServicesPage;
--- END OF FILE: ./app/[locale]/services/page.tsx ---


--- START OF FILE: ./app/[locale]/testimonials/page.tsx ---
"use client";
import { useState } from 'react';
import { Star, Quote, ArrowLeft, Play, ExternalLink, X } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Link } from '@/i18n/navigation';
import { useTranslations } from 'next-intl';
import ScrollReveal from '@/components/ScrollReveal';

const TestimonialsPage = () => {
  const t = useTranslations('testimonialsPage');
  const [selectedVideo, setSelectedVideo] = useState<string | null>(null);

  // Video testimonials data from translations
  const videoTestimonials = Array.from({ length: 4 }, (_, i) => ({
    id: i + 1,
    name: t(`videoTestimonials.${i}.name`),
    location: t(`videoTestimonials.${i}.location`),
    title: t(`videoTestimonials.${i}.title`),
    youtubeId: t(`videoTestimonials.${i}.youtubeId`),
    thumbnail: `https://img.youtube.com/vi/${t(`videoTestimonials.${i}.youtubeId`)}/maxresdefault.jpg`,
    duration: t(`videoTestimonials.${i}.duration`),
    rating: 5,
    savings: t(`videoTestimonials.${i}.savings`),
    systemSize: t(`videoTestimonials.${i}.systemSize`),
    description: t(`videoTestimonials.${i}.description`)
  }));

  // Written testimonials from existing translations
  const testimonials = [
    {
      name: t('testimonials.0.name'),
      location: t('testimonials.0.location'),
      rating: 5,
      text: t('testimonials.0.text'),
      gradient: "from-blue-500 to-cyan-500",
      project: t('testimonials.0.project'),
      savings: t('testimonials.0.savings')
    },
    {
      name: t('testimonials.1.name'),
      location: t('testimonials.1.location'),
      rating: 5,
      text: t('testimonials.1.text'),
      gradient: "from-green-500 to-emerald-500",
      project: t('testimonials.1.project'),
      savings: t('testimonials.1.savings')
    },
    {
      name: t('testimonials.2.name'),
      location: t('testimonials.2.location'),
      rating: 5,
      text: t('testimonials.2.text'),
      gradient: "from-purple-500 to-violet-500",
      project: t('testimonials.2.project'),
      savings: t('testimonials.2.savings')
    },
    {
      name: t('testimonials.3.name'),
      location: t('testimonials.3.location'),
      rating: 5,
      text: t('testimonials.3.text'),
      gradient: "from-orange-500 to-red-500",
      project: t('testimonials.3.project'),
      savings: t('testimonials.3.savings')
    },
    {
      name: t('testimonials.4.name'),
      location: t('testimonials.4.location'),
      rating: 5,
      text: t('testimonials.4.text'),
      gradient: "from-teal-500 to-cyan-500",
      project: t('testimonials.4.project'),
      savings: t('testimonials.4.savings')
    },
    {
      name: t('testimonials.5.name'),
      location: t('testimonials.5.location'),
      rating: 5,
      text: t('testimonials.5.text'),
      gradient: "from-indigo-500 to-blue-500",
      project: t('testimonials.5.project'),
      savings: t('testimonials.5.savings')
    },
    // Add more testimonials...
    ...Array.from({ length: 6 }, (_, i) => ({
      name: t(`additionalTestimonials.${i}.name`),
      location: t(`additionalTestimonials.${i}.location`),
      rating: 5,
      text: t(`additionalTestimonials.${i}.text`),
      gradient: `from-${['blue', 'green', 'purple', 'orange', 'teal', 'indigo'][i % 6]}-500 to-${['cyan', 'emerald', 'violet', 'red', 'cyan', 'blue'][i % 6]}-500`,
      project: t(`additionalTestimonials.${i}.project`),
      savings: t(`additionalTestimonials.${i}.savings`)
    }))
  ];

  const openVideo = (youtubeId: string) => {
    setSelectedVideo(youtubeId);
  };

  const closeVideo = () => {
    setSelectedVideo(null);
  };

  return (
    <>
      <div className="min-h-screen bg-gradient-to-br from-white to-gray-50 pt-32 relative overflow-hidden">
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-20 left-1/4 w-96 h-96 bg-gradient-to-r from-orange-400/10 to-amber-400/10 rounded-full blur-3xl animate-pulse-slow"></div>
          <div className="absolute bottom-20 right-1/4 w-72 h-72 bg-gradient-to-r from-blue-400/10 to-cyan-400/10 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">
          {/* Header with ScrollReveal */}
          <div className="mb-12">
            <ScrollReveal direction="up" delay={100}>
              <Link href="/">
                <Button variant="outline" className="mb-6">
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  {t('backToHome')}
                </Button>
              </Link>
            </ScrollReveal>

            <ScrollReveal direction="up" delay={300}>
              <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6 tracking-tight">
                {t('title')}
              </h1>
            </ScrollReveal>

            <ScrollReveal direction="up" delay={500}>
              <p className="text-xl text-gray-600 max-w-3xl leading-relaxed">
                {t('subtitle')}
              </p>
            </ScrollReveal>
          </div>

          {/* Video Testimonials Section with ScrollReveal */}
          <div className="mb-16">
            <div className="text-center mb-12">
              <ScrollReveal direction="up" delay={700}>
                <div className="inline-flex items-center px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-orange-200/50 shadow-lg mb-6">
                  <span className="text-sm font-semibold text-orange-600">{t('videoReviews')}</span>
                </div>
              </ScrollReveal>

              <ScrollReveal direction="up" delay={900}>
                <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
                  {t('watchCustomerStories')}
                </h2>
              </ScrollReveal>

              <ScrollReveal direction="up" delay={1100}>
                <p className="text-lg text-gray-600 max-w-2xl mx-auto">
                  {t('seeRealCustomers')}
                </p>
              </ScrollReveal>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {videoTestimonials.map((testimonial, index) => (
                <ScrollReveal
                  key={testimonial.id}
                  direction="scale"
                  delay={1300 + (index * 200)}
                >
                  <Card className="group hover:shadow-2xl transition-all duration-500 bg-white/80 backdrop-blur-sm border-0 hover:-translate-y-2 overflow-hidden">
                    <div className="relative">
                      {/* YouTube Video Thumbnail */}
                      <div className="relative aspect-[16/9] overflow-hidden cursor-pointer" onClick={() => openVideo(testimonial.youtubeId)}>
                        <img
                          src={testimonial.thumbnail}
                          alt={testimonial.name}
                          className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                          loading="lazy"
                        />
                        
                        {/* Play Button Overlay */}
                        <div className="absolute inset-0 bg-black/30 flex items-center justify-center group-hover:bg-black/50 transition-all duration-300">
                          <div className="relative">
                            <div className="absolute inset-0 bg-red-600 rounded-full animate-pulse opacity-75"></div>
                            <Button
                              size="lg"
                              className="relative bg-red-600 hover:bg-red-700 text-white border-0 rounded-full p-6 shadow-2xl transform group-hover:scale-110 transition-all duration-300"
                            >
                              <Play className="h-8 w-8 ml-1" fill="white" />
                            </Button>
                          </div>
                        </div>
                        
                        {/* Duration Badge */}
                        <div className="absolute bottom-4 right-4 bg-black/80 text-white px-3 py-1 rounded-lg text-sm font-medium">
                          {testimonial.duration}
                        </div>
                        
                        {/* YouTube Badge */}
                        <div className="absolute top-4 left-4 bg-red-600 text-white px-3 py-1 rounded-lg text-xs font-bold flex items-center">
                          <ExternalLink className="h-3 w-3 mr-1" />
                          YouTube
                        </div>
                      </div>
                    </div>

                    <CardContent className="p-6">
                      <div className="flex items-center mb-4">
                        {[...Array(testimonial.rating)].map((_, i) => (
                          <Star key={i} className="h-5 w-5 text-yellow-400 fill-current" />
                        ))}
                      </div>
                      
                      <h3 className="text-xl font-bold text-gray-900 mb-2">{testimonial.title}</h3>
                      <p className="text-gray-600 mb-4 text-sm">{testimonial.description}</p>
                      
                      <div className="flex items-center space-x-3 mb-6">
                        <div className="w-12 h-12 bg-gradient-to-br from-orange-400 to-amber-500 rounded-full flex items-center justify-center shadow-lg">
                          <span className="text-white font-semibold text-lg">
                            {testimonial.name.charAt(0)}
                          </span>
                        </div>
                        <div>
                          <p className="font-semibold text-gray-900">{testimonial.name}</p>
                          <p className="text-gray-600 text-sm">{testimonial.location}</p>
                        </div>
                      </div>

                      <div className="bg-gradient-to-r from-green-50 to-blue-50 p-4 rounded-xl">
                        <div className="grid grid-cols-2 gap-4 text-center">
                          <div>
                            <p className="text-xs text-gray-500 uppercase tracking-wider">{t('systemSize')}</p>
                            <p className="font-bold text-gray-900">{testimonial.systemSize}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500 uppercase tracking-wider">{t('annualSavings')}</p>
                            <p className="font-bold text-green-600">{testimonial.savings}</p>
                          </div>
                        </div>
                      </div>

                      <Button
                        onClick={() => openVideo(testimonial.youtubeId)}
                        className="w-full mt-4 bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white transition-all duration-300"
                      >
                        <Play className="mr-2 h-4 w-4" />
                        {t('watchFullStory')}
                      </Button>
                    </CardContent>
                  </Card>
                </ScrollReveal>
              ))}
            </div>
          </div>

          {/* Written Testimonials Section with ScrollReveal */}
          <div className="mb-8">
            <div className="text-center mb-12">
              <ScrollReveal direction="up" delay={2100}>
                <div className="inline-flex items-center px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-orange-200/50 shadow-lg mb-6">
                  <span className="text-sm font-semibold text-orange-600">{t('writtenReviews')}</span>
                </div>
              </ScrollReveal>

              <ScrollReveal direction="up" delay={2300}>
                <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
                  {t('detailedCustomerReviews')}
                </h2>
              </ScrollReveal>

              <ScrollReveal direction="up" delay={2500}>
                <p className="text-lg text-gray-600 max-w-2xl mx-auto">
                  {t('readComprehensiveFeedback')}
                </p>
              </ScrollReveal>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {testimonials.map((testimonial, index) => (
              <ScrollReveal
                key={index}
                direction="up"
                delay={2700 + (index * 100)}
              >
                <Card className="group hover:shadow-2xl transition-all duration-500 bg-white/80 backdrop-blur-sm border-0 hover:-translate-y-2">
                  <CardContent className="p-8 relative">
                    <div className={`absolute top-4 right-4 bg-gradient-to-br ${testimonial.gradient} p-2 rounded-lg opacity-20`}>
                      <Quote className="h-6 w-6 text-white" />
                    </div>

                    <div className="flex items-center mb-6">
                      {[...Array(testimonial.rating)].map((_, i) => (
                        <Star key={i} className="h-5 w-5 text-yellow-400 fill-current" />
                      ))}
                    </div>

                    <p className="text-gray-700 mb-6 leading-relaxed">
                      &quot;{testimonial.text}&quot;
                    </p>

                    <div className="space-y-4">
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-gray-500">{t('project')}</span>
                        <span className="font-semibold text-gray-700">{testimonial.project}</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-gray-500">{t('annualSavings')}</span>
                        <span className="font-semibold text-green-600">{testimonial.savings}</span>
                      </div>
                    </div>

                    <div className="border-t border-gray-200/50 pt-6 mt-6">
                      <div className="flex items-center space-x-4">
                        <div className={`w-12 h-12 bg-gradient-to-br ${testimonial.gradient} rounded-full flex items-center justify-center shadow-lg`}>
                          <span className="text-white font-semibold text-lg">
                            {testimonial.name.charAt(0)}
                          </span>
                        </div>
                        <div>
                          <p className="font-semibold text-gray-900">{testimonial.name}</p>
                          <p className="text-gray-600 text-sm">{testimonial.location}</p>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </ScrollReveal>
            ))}
          </div>

          {/* Call to Action with ScrollReveal */}
          <ScrollReveal direction="up" delay={4000}>
            <div className="mt-16 text-center">
              <div className="bg-gradient-to-r from-orange-500 to-amber-500 rounded-2xl p-8 text-white">
                <h3 className="text-2xl font-bold mb-4">{t('cta.title')}</h3>
                <p className="text-orange-100 mb-6">{t('cta.description')}</p>
                <Button className="bg-white text-orange-600 hover:bg-orange-50 transition-all duration-300 transform hover:scale-105 shadow-lg">
                  {t('cta.button')}
                </Button>
              </div>
            </div>
          </ScrollReveal>
        </div>
      </div>

      {/* YouTube Video Modal */}
      {selectedVideo && (
        <div className="fixed inset-0 z-50 bg-black/95 backdrop-blur-md flex items-center justify-center p-4">
          <div className="relative w-full max-w-5xl aspect-[16/9]">
            <Button
              onClick={closeVideo}
              variant="ghost"
              size="icon"
              className="absolute -top-12 right-0 z-60 text-white hover:bg-white/20 h-10 w-10"
            >
              <X className="h-6 w-6" />
            </Button>
            
            {/* YouTube Embed */}
            <iframe
              src={`https://www.youtube.com/embed/${selectedVideo}?autoplay=1&rel=0&modestbranding=1`}
              title={t('customerTestimonial')}
              className="w-full h-full rounded-lg shadow-2xl"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
            />
          </div>
          
          <div className="absolute bottom-8 left-1/2 -translate-x-1/2 text-center">
            <p className="text-white text-sm opacity-75">
              {t('modalInstructions')}
            </p>
          </div>
        </div>
      )}
    </>
  );
};

export default TestimonialsPage;
--- END OF FILE: ./app/[locale]/testimonials/page.tsx ---


--- START OF FILE: ./components/About.tsx ---
"use client";
import { Link } from '@/i18n/navigation';
import { Award, Users, Zap, Leaf, ArrowRight } from 'lucide-react';
import { useTranslations } from 'next-intl';
import { Button } from './ui/button';
import { useState, useEffect, useRef } from 'react';
import ScrollReveal from '@/components/ScrollReveal';

// Number animation hook (keeping for stats counter)
const useCountUp = (end: number, duration: number = 2000, delay: number = 0) => {
  const [count, setCount] = useState(0);
  const [hasStarted, setHasStarted] = useState(false);

  useEffect(() => {
    if (!hasStarted) return;

    const timer = setTimeout(() => {
      let startTime: number;
      const animate = (currentTime: number) => {
        if (!startTime) startTime = currentTime;
        const progress = Math.min((currentTime - startTime) / duration, 1);
        
        const easeOutCubic = 1 - Math.pow(1 - progress, 3);
        setCount(Math.floor(easeOutCubic * end));
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        }
      };
      requestAnimationFrame(animate);
    }, delay);

    return () => clearTimeout(timer);
  }, [end, duration, delay, hasStarted]);

  return { count, start: () => setHasStarted(true) };
};

// Intersection Observer hook (only for stats counter)
const useIntersectionObserver = (threshold: number = 0.1) => {
  const [isIntersecting, setIsIntersecting] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsIntersecting(true);
        }
      },
      { threshold }
    );

    if (ref.current) {
      observer.observe(ref.current);
    }

    return () => observer.disconnect();
  }, [threshold]);

  return { ref, isIntersecting };
};

const About = () => {
  const t = useTranslations('about');
  
  // Only keep intersection observer for stats counter
  const { ref: statsRef, isIntersecting: statsVisible } = useIntersectionObserver(0.3);
  
  // Stats data with numbers - reduced delays
  const statsData = [
    { icon: Users, number: 2500, suffix: "+", label: t('stats.customers'), gradient: "from-blue-500 to-cyan-500" },
    { icon: Zap, number: 15, suffix: "MW+", label: t('stats.installed'), gradient: "from-orange-500 to-amber-500" },
    { icon: Award, number: 12, suffix: "+", label: t('stats.experience'), gradient: "from-purple-500 to-violet-500" },
    { icon: Leaf, number: 50, suffix: "M+", label: t('stats.co2Saved'), gradient: "from-green-500 to-emerald-500" }
  ];

  // Number animations for stats - reduced delays
  const customersCount = useCountUp(2500, 1500, 50);
  const installedCount = useCountUp(15, 1200, 100);
  const experienceCount = useCountUp(12, 800, 150);
  const co2Count = useCountUp(50, 1400, 200);

  const counts = [customersCount, installedCount, experienceCount, co2Count];

  // Start animations when stats become visible
  useEffect(() => {
    if (statsVisible) {
      counts.forEach(counter => counter.start());
    }
  }, [statsVisible]);

  // Format numbers
  const formatNumber = (num: number, index: number): string => {
    if (index === 0) return new Intl.NumberFormat('en-IN').format(num); // customers
    return num.toString(); // others
  };

  // Features data
  const features = [
    {
      icon: Users,
      title: "Expert Team",
      description: "Our certified solar engineers have years of experience in designing and installing premium solar systems.",
      gradient: "from-blue-500 to-cyan-500"
    },
    {
      icon: Award,
      title: "Quality Guarantee", 
      description: "We use only tier-1 solar panels and provide comprehensive 25-year warranties on all installations.",
      gradient: "from-green-500 to-emerald-500"
    },
    {
      icon: Zap,
      title: "Fast Installation",
      description: "Most residential installations are completed in 1-3 days with minimal disruption to your daily routine.",
      gradient: "from-orange-500 to-amber-500"
    }
  ];

  return (
    <section id="about" className="py-20 bg-gradient-to-br from-slate-50 via-blue-50 to-orange-50 relative overflow-hidden">
      {/* Enhanced background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-20 w-[500px] h-[500px] bg-gradient-to-r from-orange-400/10 to-amber-400/10 rounded-full blur-3xl animate-pulse-slow"></div>
        <div className="absolute bottom-20 right-20 w-[600px] h-[600px] bg-gradient-to-r from-blue-400/10 to-cyan-400/10 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        {/* Header section - Centered like other sections */}
        <ScrollReveal direction="up" delay={0} duration={500}>
          <div className="text-center mb-12">
            <div className="inline-flex items-center px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-orange-200/50 shadow-lg mb-6">
              <span className="text-sm font-semibold text-orange-600">{t('badge')}</span>
            </div>
            
            <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6 tracking-tight">
              {t('title')}
            </h2>
            
            <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
              {t('subtitle')}
            </p>
          </div>
        </ScrollReveal>

        {/* Stats Grid - Now positioned below header */}
        <ScrollReveal direction="up" delay={200} duration={500}>
          <div 
            ref={statsRef}
            className="grid grid-cols-2 lg:grid-cols-4 gap-6 mb-16"
          >
            {statsData.map((stat, index) => (
              <div 
                key={index}
                className="group bg-white/60 backdrop-blur-xl rounded-2xl p-6 shadow-xl text-center hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 border border-white/20"
              >
                <div className={`bg-gradient-to-br ${stat.gradient} w-14 h-14 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-500 shadow-lg`}>
                  <stat.icon className="h-7 w-7 text-white" />
                </div>
                <div className="text-3xl font-bold text-gray-900 mb-2">
                  {formatNumber(counts[index].count, index)}{stat.suffix}
                </div>
                <div className="text-gray-600 font-medium">{stat.label}</div>
              </div>
            ))}
          </div>
        </ScrollReveal>

        {/* CTA Button */}
        <ScrollReveal direction="up" delay={400} duration={500}>
          <div className="text-center mb-16">
            <Link href="/about">
              <Button className="bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 px-8 py-4 text-lg font-semibold rounded-xl">
                {t('learnMore')}
                <ArrowRight className="ml-2 h-5 w-5" />
              </Button>
            </Link>
          </div>
        </ScrollReveal>

        {/* Additional content section - Group all feature cards */}
        <ScrollReveal direction="up" delay={600} duration={500}>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <div key={index} className="text-center space-y-4">
                <div className={`w-16 h-16 bg-gradient-to-br ${feature.gradient} rounded-2xl flex items-center justify-center mx-auto shadow-xl hover:scale-110 transition-transform duration-300`}>
                  <feature.icon className="h-8 w-8 text-white" />
                </div>
                <h3 className="text-xl font-semibold text-gray-900">{feature.title}</h3>
                <p className="text-gray-600 leading-relaxed">
                  {feature.description}
                </p>
              </div>
            ))}
          </div>
        </ScrollReveal>
      </div>
    </section>
  );
};

export default About;
--- END OF FILE: ./components/About.tsx ---


--- START OF FILE: ./components/AccessibilityEnhancements.tsx ---
'use client';
import { useEffect, useState } from 'react';
import { usePathname } from 'next/navigation';

export default function AccessibilityEnhancements() {
  const [isHighContrast, setIsHighContrast] = useState(false);
  const [fontSize, setFontSize] = useState(100);
  const pathname = usePathname();

  // Skip to main content functionality
  useEffect(() => {
    const skipLink = document.createElement('a');
    skipLink.href = '#main-content';
    skipLink.textContent = 'Skip to main content';
    skipLink.className = 'sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-orange-600 focus:text-white focus:rounded';
    
    document.body.insertBefore(skipLink, document.body.firstChild);
    
    return () => {
      if (document.body.contains(skipLink)) {
        document.body.removeChild(skipLink);
      }
    };
  }, []);

  // Focus management for route changes
  useEffect(() => {
    const mainContent = document.getElementById('main-content');
    const heading = document.querySelector('h1');
    
    if (heading) {
      heading.focus();
      heading.setAttribute('tabindex', '-1');
    } else if (mainContent) {
      mainContent.focus();
      mainContent.setAttribute('tabindex', '-1');
    }
  }, [pathname]);

  // High contrast mode
  useEffect(() => {
    if (isHighContrast) {
      document.documentElement.classList.add('high-contrast');
    } else {
      document.documentElement.classList.remove('high-contrast');
    }
  }, [isHighContrast]);

  // Font size adjustment
  useEffect(() => {
    document.documentElement.style.fontSize = `${fontSize}%`;
  }, [fontSize]);

  // Keyboard navigation announcement
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Tab') {
        document.body.classList.add('keyboard-navigation');
      }
    };

    const handleMouseDown = () => {
      document.body.classList.remove('keyboard-navigation');
    };

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('mousedown', handleMouseDown);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('mousedown', handleMouseDown);
    };
  }, []);

  return (
    <>
      {/* Accessibility toolbar */}
      <div className="fixed top-0 right-0 z-50 bg-white border border-gray-200 rounded-bl-lg shadow-lg p-2 space-y-2">
        <button
          onClick={() => setIsHighContrast(!isHighContrast)}
          className="block w-full text-xs px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded"
          aria-label={`Turn ${isHighContrast ? 'off' : 'on'} high contrast mode`}
        >
          {isHighContrast ? '🔆' : '🌓'} Contrast
        </button>
        
        <div className="space-y-1">
          <button
            onClick={() => setFontSize(Math.min(fontSize + 10, 150))}
            className="block w-full text-xs px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded"
            aria-label="Increase font size"
          >
            🔍+ Font
          </button>
          <button
            onClick={() => setFontSize(Math.max(fontSize - 10, 80))}
            className="block w-full text-xs px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded"
            aria-label="Decrease font size"
          >
            🔍- Font
          </button>
        </div>
      </div>

      {/* Screen reader announcements */}
      <div 
        id="sr-announcements" 
        className="sr-only" 
        aria-live="polite" 
        aria-atomic="true"
      />

      {/* CSS for accessibility */}
      <style jsx global>{`
        .sr-only {
          position: absolute;
          width: 1px;
          height: 1px;
          padding: 0;
          margin: -1px;
          overflow: hidden;
          clip: rect(0, 0, 0, 0);
          white-space: nowrap;
          border: 0;
        }

        .focus\\:not-sr-only:focus {
          position: static;
          width: auto;
          height: auto;
          padding: inherit;
          margin: inherit;
          overflow: visible;
          clip: auto;
          white-space: normal;
        }

        /* High contrast mode */
        .high-contrast {
          filter: contrast(200%) saturate(0%);
        }

        /* Focus indicators */
        .keyboard-navigation *:focus {
          outline: 3px solid #f97316 !important;
          outline-offset: 2px !important;
        }

        /* Better focus for buttons */
        button:focus-visible,
        a:focus-visible,
        input:focus-visible,
        textarea:focus-visible,
        select:focus-visible {
          outline: 3px solid #f97316;
          outline-offset: 2px;
        }

        /* Improved color contrast */
        .text-gray-600 {
          color: #4b5563;
        }

        .text-gray-500 {
          color: #6b7280;
        }

        /* Motion reduction */
        @media (prefers-reduced-motion: reduce) {
          *,
          *::before,
          *::after {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
            scroll-behavior: auto !important;
          }
        }
      `}</style>
    </>
  );
}
--- END OF FILE: ./components/AccessibilityEnhancements.tsx ---


--- START OF FILE: ./components/FloatingClickToCall.tsx ---
"use client";
import { useState, useEffect, useRef } from 'react';
import { X, Bot, Send, User, Sparkles, MessageSquare } from 'lucide-react';
import { useLocale, useTranslations } from 'next-intl';

const AIChatbot = () => {
  const [showChat, setShowChat] = useState(false);
  const [isVisible, setIsVisible] = useState(false);
  const [messages, setMessages] = useState<Array<{text: string, isBot: boolean, timestamp: Date}>>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showQuickReplies, setShowQuickReplies] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const locale = useLocale();
  const t = useTranslations('aiChatbot');

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    console.log('AI Chatbot mounted');
    const timer = setTimeout(() => {
      setIsVisible(true);
      console.log('AI Chatbot is now visible');
    }, 2000);
    return () => clearTimeout(timer);
  }, []);

  const addMessage = (text: string, isBot: boolean = false) => {
    setMessages(prev => [...prev, { text, isBot, timestamp: new Date() }]);
  };

  // Enhanced keyword detection
  const detectIntent = (message: string) => {
    const msg = message.toLowerCase();
    
    // Cost related keywords
    if (msg.match(/(cost|price|rate|charge|लागत|कीमत|दर|खर्च)/)) return 'cost';
    
    // Subsidy related keywords  
    if (msg.match(/(subsidy|subsidi|incentive|government|सब्सिडी|सरकारी|प्रोत्साहन)/)) return 'subsidy';
    
    // Installation related keywords
    if (msg.match(/(install|setup|process|installation|इंस्टॉल|स्थापना|प्रक्रिया)/)) return 'installation';
    
    // Financing related keywords
    if (msg.match(/(loan|finance|emi|payment|लोन|वित्त|भुगतान|किस्त)/)) return 'financing';
    
    // System types
    if (msg.match(/(grid|off.?grid|on.?grid|hybrid|type|ग्रिड|हाइब्रिड|प्रकार)/)) return 'types';
    
    // Savings related keywords
    if (msg.match(/(save|saving|benefit|profit|बचत|फायदा|लाभ)/)) return 'savings';
    
    // Technical keywords
    if (msg.match(/(technical|panel|inverter|efficiency|तकनीकी|पैनल|इन्वर्टर)/)) return 'technical';
    
    // Maintenance keywords
    if (msg.match(/(maintenance|clean|service|रखरखाव|सफाई|सेवा)/)) return 'maintenance';
    
    return 'fallback';
  };

  const getBotResponse = (userMessage: string) => {
    const intent = detectIntent(userMessage);
    
    if (intent !== 'fallback') {
      return t(`responses.${intent}`);
    }
    
    // Get random fallback response
    const fallbackIndex = Math.floor(Math.random() * 3);
    return t(`fallback.${fallbackIndex}`);
  };

  const handleSendMessage = (message: string = inputMessage) => {
    if (!message.trim()) return;
    
    // Add user message
    addMessage(message, false);
    setInputMessage('');
    setShowQuickReplies(false);
    setIsTyping(true);
    
    // Simulate typing delay
    setTimeout(() => {
      const response = getBotResponse(message);
      addMessage(response, true);
      setIsTyping(false);
      
      // Show lead capture after 3 interactions
      if (messages.length > 4 && Math.random() > 0.7) {
        setTimeout(() => {
          const leadCapture = Math.floor(Math.random() * 2);
          const leadMsg = t(`leadCapture.${leadCapture}`);
          addMessage(leadMsg, true);
        }, 2000);
      }
    }, 1000 + Math.random() * 1000);
  };

  const handleQuickReply = (keyword: string) => {
    const quickReplyText = t(`quickReplies.${keyword}`);
    handleSendMessage(quickReplyText);
  };

  const initializeChat = () => {
    if (messages.length === 0) {
      const greetingIndex = Math.floor(Math.random() * 3);
      const greeting = t(`greetings.${greetingIndex}`);
      addMessage(greeting, true);
    }
  };

  const openChat = () => {
    console.log('Opening AI Solar Chatbot');
    setShowChat(true);
    initializeChat();
  };

  const closeChat = () => {
    setShowChat(false);
  };

  if (!isVisible) return null;

  const quickRepliesData = [
    { text: t('quickReplies.cost'), keyword: 'cost' },
    { text: t('quickReplies.subsidy'), keyword: 'subsidy' },
    { text: t('quickReplies.installation'), keyword: 'installation' },
    { text: t('quickReplies.financing'), keyword: 'financing' },
    { text: t('quickReplies.types'), keyword: 'types' },
    { text: t('quickReplies.savings'), keyword: 'savings' }
  ];

  return (
    <>
      {/* AI Chatbot Button */}
      <div 
        style={{ 
          position: 'fixed', 
          bottom: '24px', 
          right: '24px', 
          zIndex: 9999,
          fontFamily: 'system-ui, -apple-system, sans-serif'
        }}
      >
        <button
          onClick={openChat}
          style={{
            width: '70px',
            height: '70px',
            borderRadius: '50%',
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            border: 'none',
            color: 'white',
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: '0 8px 32px rgba(102, 126, 234, 0.4)',
            transition: 'all 0.3s ease',
            position: 'relative',
            overflow: 'hidden'
          }}
          onMouseOver={(e) => {
            e.currentTarget.style.transform = 'scale(1.1)';
            e.currentTarget.style.boxShadow = '0 12px 40px rgba(102, 126, 234, 0.6)';
          }}
          onMouseOut={(e) => {
            e.currentTarget.style.transform = 'scale(1)';
            e.currentTarget.style.boxShadow = '0 8px 32px rgba(102, 126, 234, 0.4)';
          }}
          title={t('buttonTitle')}
        >
          {/* Animated background */}
          <div style={{
            position: 'absolute',
            inset: 0,
            background: 'linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%)',
            animation: 'shimmer 3s infinite linear'
          }}></div>
          
          {/* Main Bot Icon */}
          <Bot size={32} style={{ zIndex: 1 }} />
          
          {/* AI Badge */}
          <div style={{
            position: 'absolute',
            top: '-4px',
            right: '-4px',
            width: '28px',
            height: '28px',
            background: 'linear-gradient(135deg, #ff6b6b, #ee5a24)',
            borderRadius: '50%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '10px',
            fontWeight: 'bold',
            color: 'white',
            border: '3px solid white',
            boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
          }}>
            AI
          </div>
          
          {/* Sparkle Animation */}
          <Sparkles 
            size={16} 
            style={{
              position: 'absolute',
              top: '8px',
              left: '8px',
              animation: 'sparkle 2s infinite ease-in-out',
              opacity: 0.8
            }} 
          />
          
          {/* Pulse Ring */}
          <div style={{
            position: 'absolute',
            inset: '-8px',
            borderRadius: '50%',
            border: '2px solid rgba(102, 126, 234, 0.3)',
            animation: 'pulse-ring 2s infinite cubic-bezier(0.4, 0, 0.6, 1)'
          }}></div>
        </button>

        {/* Chat Indicator */}
        {!showChat && (
          <div style={{
            position: 'absolute',
            bottom: '80px',
            right: '0',
            background: 'rgba(0,0,0,0.8)',
            color: 'white',
            padding: '8px 12px',
            borderRadius: '20px',
            fontSize: '12px',
            fontWeight: '500',
            whiteSpace: 'nowrap',
            opacity: 0,
            animation: 'slideInFade 0.5s ease-out 3s forwards',
            boxShadow: '0 4px 12px rgba(0,0,0,0.3)'
          }}>
            💬 {t('chatIndicator')}
          </div>
        )}
      </div>

      {/* Enhanced AI Chat Modal */}
      {showChat && (
        <div style={{
          position: 'fixed',
          bottom: '110px',
          right: '24px',
          width: '380px',
          height: '500px',
          background: 'white',
          borderRadius: '20px',
          boxShadow: '0 25px 60px rgba(0,0,0,0.4)',
          border: '1px solid #e5e7eb',
          zIndex: 10000,
          display: 'flex',
          flexDirection: 'column',
          fontFamily: 'system-ui, -apple-system, sans-serif',
          overflow: 'hidden',
          animation: 'slideUpFade 0.3s ease-out'
        }}>
          {/* Enhanced Chat Header */}
          <div style={{
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            color: 'white',
            padding: '20px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            borderTopLeftRadius: '20px',
            borderTopRightRadius: '20px',
            position: 'relative',
            overflow: 'hidden'
          }}>
            {/* Animated background */}
            <div style={{
              position: 'absolute',
              inset: 0,
              background: 'linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%)',
              animation: 'shimmer 4s infinite linear'
            }}></div>
            
            <div style={{ display: 'flex', alignItems: 'center', gap: '12px', zIndex: 1 }}>
              <div style={{
                width: '44px',
                height: '44px',
                background: 'rgba(255,255,255,0.2)',
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                position: 'relative'
              }}>
                <Bot size={24} />
                <div style={{
                  position: 'absolute',
                  top: '-2px',
                  right: '-2px',
                  width: '12px',
                  height: '12px',
                  background: '#10b981',
                  borderRadius: '50%',
                  border: '2px solid white'
                }}></div>
              </div>
              <div>
                <h3 style={{ margin: 0, fontSize: '16px', fontWeight: 'bold', display: 'flex', alignItems: 'center', gap: '6px' }}>
                  {t('headerTitle')}
                  <Sparkles size={16} style={{ opacity: 0.8 }} />
                </h3>
                <p style={{ margin: 0, fontSize: '12px', opacity: 0.9 }}>
                  ⚡ {t('headerSubtitle')}
                </p>
              </div>
            </div>
            <button
              onClick={closeChat}
              style={{
                background: 'rgba(255,255,255,0.2)',
                border: 'none',
                borderRadius: '50%',
                width: '36px',
                height: '36px',
                color: 'white',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                transition: 'background 0.2s ease',
                zIndex: 1
              }}
              onMouseOver={(e) => e.currentTarget.style.background = 'rgba(255,255,255,0.3)'}
              onMouseOut={(e) => e.currentTarget.style.background = 'rgba(255,255,255,0.2)'}
            >
              <X size={18} />
            </button>
          </div>

          {/* Chat Messages Area */}
          <div style={{ 
            flex: 1, 
            padding: '20px', 
            overflowY: 'auto',
            display: 'flex',
            flexDirection: 'column',
            gap: '16px',
            background: 'linear-gradient(180deg, #f8fafc 0%, #f1f5f9 100%)'
          }}>
            {messages.map((message, index) => (
              <div key={index} style={{
                display: 'flex',
                flexDirection: message.isBot ? 'row' : 'row-reverse',
                alignItems: 'flex-start',
                gap: '12px',
                animation: `messageSlide 0.3s ease-out ${index * 0.1}s backwards`
              }}>
                {message.isBot && (
                  <div style={{
                    width: '32px',
                    height: '32px',
                    background: 'linear-gradient(135deg, #667eea, #764ba2)',
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    flexShrink: 0,
                    boxShadow: '0 2px 8px rgba(102, 126, 234, 0.3)'
                  }}>
                    <Bot size={16} color="white" />
                  </div>
                )}
                
                <div style={{
                  background: message.isBot ? 'white' : 'linear-gradient(135deg, #667eea, #764ba2)',
                  color: message.isBot ? '#374151' : 'white',
                  padding: '14px 16px',
                  borderRadius: message.isBot ? '18px 18px 18px 6px' : '18px 18px 6px 18px',
                  fontSize: '14px',
                  maxWidth: '75%',
                  lineHeight: '1.5',
                  whiteSpace: 'pre-line',
                  boxShadow: message.isBot ? '0 2px 12px rgba(0,0,0,0.1)' : '0 2px 12px rgba(102, 126, 234, 0.3)',
                  border: message.isBot ? '1px solid #e5e7eb' : 'none'
                }}>
                  {message.text}
                </div>
                
                {!message.isBot && (
                  <div style={{
                    width: '32px',
                    height: '32px',
                    background: '#e5e7eb',
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    flexShrink: 0
                  }}>
                    <User size={16} color="#6b7280" />
                  </div>
                )}
              </div>
            ))}

            {/* Enhanced Typing Indicator */}
            {isTyping && (
              <div style={{
                display: 'flex',
                alignItems: 'flex-start',
                gap: '12px',
                animation: 'messageSlide 0.3s ease-out'
              }}>
                <div style={{
                  width: '32px',
                  height: '32px',
                  background: 'linear-gradient(135deg, #667eea, #764ba2)',
                  borderRadius: '50%',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  boxShadow: '0 2px 8px rgba(102, 126, 234, 0.3)'
                }}>
                  <Bot size={16} color="white" />
                </div>
                <div style={{
                  background: 'white',
                  padding: '14px 16px',
                  borderRadius: '18px 18px 18px 6px',
                  border: '1px solid #e5e7eb',
                  boxShadow: '0 2px 12px rgba(0,0,0,0.1)'
                }}>
                  <div style={{
                    display: 'flex',
                    gap: '4px',
                    alignItems: 'center'
                  }}>
                    <div style={{
                      width: '8px',
                      height: '8px',
                      background: '#667eea',
                      borderRadius: '50%',
                      animation: 'bounce 1.4s infinite ease-in-out'
                    }}></div>
                    <div style={{
                      width: '8px',
                      height: '8px',
                      background: '#667eea',
                      borderRadius: '50%',
                      animation: 'bounce 1.4s infinite ease-in-out 0.16s'
                    }}></div>
                    <div style={{
                      width: '8px',
                      height: '8px',
                      background: '#667eea',
                      borderRadius: '50%',
                      animation: 'bounce 1.4s infinite ease-in-out 0.32s'
                    }}></div>
                  </div>
                </div>
              </div>
            )}

            {/* Enhanced Quick Reply Buttons */}
            {showQuickReplies && messages.length > 0 && (
              <div style={{
                display: 'flex',
                flexDirection: 'column',
                gap: '8px',
                marginTop: '12px',
                animation: 'slideUpFade 0.5s ease-out 0.5s backwards'
              }}>
                <div style={{
                  fontSize: '12px',
                  color: '#6b7280',
                  fontWeight: '600',
                  marginBottom: '4px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '4px'
                }}>
                  <MessageSquare size={14} />
                  {t('quickTopics')}
                </div>
                <div style={{
                  display: 'flex',
                  flexWrap: 'wrap',
                  gap: '6px'
                }}>
                  {quickRepliesData.slice(0, 6).map((reply, index) => (
                    <button
                      key={index}
                      onClick={() => handleQuickReply(reply.keyword)}
                      style={{
                        background: 'white',
                        border: '1px solid #e5e7eb',
                        borderRadius: '20px',
                        padding: '8px 12px',
                        fontSize: '12px',
                        cursor: 'pointer',
                        transition: 'all 0.2s ease',
                        color: '#374151',
                        fontWeight: '500',
                        boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
                      }}
                      onMouseOver={(e) => {
                        e.currentTarget.style.background = 'linear-gradient(135deg, #667eea, #764ba2)';
                        e.currentTarget.style.color = 'white';
                        e.currentTarget.style.transform = 'translateY(-1px)';
                        e.currentTarget.style.boxShadow = '0 4px 8px rgba(102, 126, 234, 0.3)';
                      }}
                      onMouseOut={(e) => {
                        e.currentTarget.style.background = 'white';
                        e.currentTarget.style.color = '#374151';
                        e.currentTarget.style.transform = 'translateY(0)';
                        e.currentTarget.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)';
                      }}
                    >
                      {reply.text}
                    </button>
                  ))}
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Enhanced Chat Input */}
          <div style={{ 
            padding: '20px', 
            borderTop: '1px solid #e5e7eb',
            background: 'white',
            borderBottomLeftRadius: '20px',
            borderBottomRightRadius: '20px'
          }}>
            <form onSubmit={(e) => { e.preventDefault(); handleSendMessage(); }} style={{
              display: 'flex',
              gap: '12px',
              alignItems: 'flex-end'
            }}>
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder={t('inputPlaceholder')}
                style={{
                  flex: 1,
                  padding: '12px 16px',
                  border: '2px solid #e5e7eb',
                  borderRadius: '25px',
                  fontSize: '14px',
                  outline: 'none',
                  transition: 'all 0.2s ease',
                  background: '#f8fafc'
                }}
                onFocus={(e) => {
                  e.currentTarget.style.borderColor = '#667eea';
                  e.currentTarget.style.background = 'white';
                }}
                onBlur={(e) => {
                  e.currentTarget.style.borderColor = '#e5e7eb';
                  e.currentTarget.style.background = '#f8fafc';
                }}
              />
              <button
                type="submit"
                disabled={!inputMessage.trim() || isTyping}
                style={{
                  background: inputMessage.trim() ? 'linear-gradient(135deg, #667eea, #764ba2)' : '#e5e7eb',
                  color: 'white',
                  border: 'none',
                  borderRadius: '50%',
                  width: '44px',
                  height: '44px',
                  cursor: inputMessage.trim() ? 'pointer' : 'not-allowed',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'all 0.2s ease',
                  flexShrink: 0,
                  boxShadow: inputMessage.trim() ? '0 4px 12px rgba(102, 126, 234, 0.3)' : 'none'
                }}
                onMouseOver={(e) => {
                  if (inputMessage.trim()) {
                    e.currentTarget.style.transform = 'scale(1.05)';
                    e.currentTarget.style.boxShadow = '0 6px 16px rgba(102, 126, 234, 0.4)';
                  }
                }}
                onMouseOut={(e) => {
                  e.currentTarget.style.transform = 'scale(1)';
                  e.currentTarget.style.boxShadow = inputMessage.trim() ? '0 4px 12px rgba(102, 126, 234, 0.3)' : 'none';
                }}
              >
                <Send size={18} />
              </button>
            </form>
            
            {/* Enhanced powered by indicator */}
            <div style={{
              textAlign: 'center',
              marginTop: '12px',
              fontSize: '11px',
              color: '#9ca3af',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '4px'
            }}>
              <Sparkles size={12} />
              {t('poweredBy')}
            </div>
          </div>
        </div>
      )}

      {/* Enhanced CSS Animations */}
      <style jsx>{`
        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
        
        @keyframes sparkle {
          0%, 100% { opacity: 0.5; transform: scale(0.8); }
          50% { opacity: 1; transform: scale(1.2); }
        }
        
        @keyframes pulse-ring {
          0% { transform: scale(0.8); opacity: 1; }
          100% { transform: scale(1.2); opacity: 0; }
        }
        
        @keyframes slideInFade {
          from {
            opacity: 0;
            transform: translateX(20px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }
        
        @keyframes slideUpFade {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes messageSlide {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes bounce {
          0%, 80%, 100% {
            transform: scale(0);
          }
          40% {
            transform: scale(1);
          }
        }
      `}</style>
    </>
  );
};

export default AIChatbot;
--- END OF FILE: ./components/FloatingClickToCall.tsx ---


--- START OF FILE: ./components/Footer.tsx ---
"use client"; 
import Link from 'next/link';
import { Sun, Phone, Mail, MapPin, Facebook, Twitter, Linkedin, Instagram, ArrowUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useTranslations } from 'next-intl';
import ScrollReveal from '@/components/ScrollReveal';

const Footer = () => {
  const t = useTranslations('footer');
  const tHeader = useTranslations('header');

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  return (
    <footer className="bg-gradient-to-br from-gray-900 via-slate-800 to-gray-900 text-white relative overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-gradient-to-r from-orange-400/10 to-amber-400/10 rounded-full blur-3xl animate-pulse-slow"></div>
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-gradient-to-r from-blue-400/10 to-cyan-400/10 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 relative z-10">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-12">
          {/* Company Info with ScrollReveal */}
          <ScrollReveal direction="up" delay={100}>
            <div className="space-y-6">
              <div className="flex items-center space-x-3">
                <div className="bg-gradient-to-br from-orange-400 to-amber-500 p-2 rounded-xl shadow-lg">
                  <Sun className="h-8 w-8 text-white" />
                </div>
                <span className="text-2xl font-bold">{tHeader('companyName')}</span>
              </div>
              <p className="text-gray-300 leading-relaxed">
                {t('description')}
              </p>
              <div className="flex space-x-4">
                <ScrollReveal direction="scale" delay={300}>
                  <div className="bg-white/10 backdrop-blur-sm p-3 rounded-xl hover:bg-white/20 transition-all duration-300 cursor-pointer group">
                    <Facebook className="h-6 w-6 text-gray-300 group-hover:text-orange-400 transition-colors" aria-label={t('social.facebook')} />
                  </div>
                </ScrollReveal>
                <ScrollReveal direction="scale" delay={400}>
                  <div className="bg-white/10 backdrop-blur-sm p-3 rounded-xl hover:bg-white/20 transition-all duration-300 cursor-pointer group">
                    <Twitter className="h-6 w-6 text-gray-300 group-hover:text-orange-400 transition-colors" aria-label={t('social.twitter')} />
                  </div>
                </ScrollReveal>
                <ScrollReveal direction="scale" delay={500}>
                  <div className="bg-white/10 backdrop-blur-sm p-3 rounded-xl hover:bg-white/20 transition-all duration-300 cursor-pointer group">
                    <Linkedin className="h-6 w-6 text-gray-300 group-hover:text-orange-400 transition-colors" aria-label={t('social.linkedin')} />
                  </div>
                </ScrollReveal>
                <ScrollReveal direction="scale" delay={600}>
                  <div className="bg-white/10 backdrop-blur-sm p-3 rounded-xl hover:bg-white/20 transition-all duration-300 cursor-pointer group">
                    <Instagram className="h-6 w-6 text-gray-300 group-hover:text-orange-400 transition-colors" aria-label={t('social.instagram')} />
                  </div>
                </ScrollReveal>
              </div>
            </div>
          </ScrollReveal>

          {/* Services with ScrollReveal */}
          <ScrollReveal direction="up" delay={200}>
            <div>
              <h3 className="text-xl font-bold mb-6 text-white">{t('services.title')}</h3>
              <ul className="space-y-3 text-gray-300">
                <ScrollReveal direction="right" delay={400}>
                  <li><Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('services.residential')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={500}>
                  <li><Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('services.commercial')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={600}>
                  <li><Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('services.industrial')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={700}>
                  <li><Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('services.audits')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={800}>
                  <li><Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('services.maintenance')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={900}>
                  <li><Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('services.storage')}</Link></li>
                </ScrollReveal>
              </ul>
            </div>
          </ScrollReveal>

          {/* Quick Links with ScrollReveal */}
          <ScrollReveal direction="up" delay={300}>
            <div>
              <h3 className="text-xl font-bold mb-6 text-white">{t('quickLinks.title')}</h3>
              <ul className="space-y-3 text-gray-300">
                <ScrollReveal direction="right" delay={500}>
                  <li><Link href="#about" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('quickLinks.about')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={600}>
                  <li><Link href="#services" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('quickLinks.services')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={700}>
                  <li><Link href="#gallery" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('quickLinks.gallery')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={800}>
                  <li><Link href="#testimonials" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('quickLinks.testimonials')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={900}>
                  <li><Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('quickLinks.financing')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={1000}>
                  <li><Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('quickLinks.warranties')}</Link></li>
                </ScrollReveal>
                <ScrollReveal direction="right" delay={1100}>
                  <li><Link href="#contact" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('quickLinks.contact')}</Link></li>
                </ScrollReveal>
              </ul>
            </div>
          </ScrollReveal>

          {/* Contact Info with ScrollReveal */}
          <ScrollReveal direction="up" delay={400}>
            <div>
              <h3 className="text-xl font-bold mb-6 text-white">{t('getInTouch.title')}</h3>
              <div className="space-y-4 text-gray-300">
                <ScrollReveal direction="left" delay={600}>
                  <div className="flex items-center space-x-3">
                    <div className="bg-gradient-to-br from-green-400 to-emerald-500 p-2 rounded-lg">
                      <Phone className="h-5 w-5 text-white" />
                    </div>
                    <span className="font-medium">{t('contact.phone')}</span>
                  </div>
                </ScrollReveal>
                <ScrollReveal direction="left" delay={700}>
                  <div className="flex items-center space-x-3">
                    <div className="bg-gradient-to-br from-blue-400 to-cyan-500 p-2 rounded-lg">
                      <Mail className="h-5 w-5 text-white" />
                    </div>
                    <span className="font-medium">{t('contact.email')}</span>
                  </div>
                </ScrollReveal>
                <ScrollReveal direction="left" delay={800}>
                  <div className="flex items-start space-x-3">
                    <div className="bg-gradient-to-br from-purple-400 to-violet-500 p-2 rounded-lg mt-1">
                      <MapPin className="h-5 w-5 text-white" />
                    </div>
                    <span className="font-medium leading-relaxed">{t('contact.address')}</span>
                  </div>
                </ScrollReveal>
              </div>
              <ScrollReveal direction="scale" delay={1000}>
                <div className="mt-6 p-6 bg-gradient-to-r from-orange-500 to-amber-500 rounded-2xl shadow-xl">
                  <p className="text-white font-bold text-lg mb-2">{t('getInTouch.quote.title')}</p>
                  <p className="text-orange-100 mb-4">{t('getInTouch.quote.description')}</p>
                  <Button 
                    onClick={scrollToTop}
                    className="bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white border-0 transition-all duration-300"
                  >
                    <ArrowUp className="mr-2 h-4 w-4" />
                    {t('getInTouch.quote.button')}
                  </Button>
                </div>
              </ScrollReveal>
            </div>
          </ScrollReveal>
        </div>

        {/* Footer Bottom with ScrollReveal */}
        <ScrollReveal direction="up" delay={1200}>
          <div className="border-t border-gray-700/50 mt-16 pt-8">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <div className="text-gray-400 font-medium">
                {t('copyright')}
              </div>
              <div className="flex space-x-8 text-gray-400 mt-4 md:mt-0">
                <ScrollReveal direction="left" delay={1400}>
                  <Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('legal.privacy')}</Link>
                </ScrollReveal>
                <ScrollReveal direction="left" delay={1500}>
                  <Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('legal.terms')}</Link>
                </ScrollReveal>
                <ScrollReveal direction="left" delay={1600}>
                  <Link href="#" className="hover:text-orange-400 transition-colors duration-300 font-medium">{t('legal.cookies')}</Link>
                </ScrollReveal>
              </div>
            </div>
          </div>
        </ScrollReveal>
      </div>
    </footer>
  );
};

export default Footer;
--- END OF FILE: ./components/Footer.tsx ---


--- START OF FILE: ./components/Gallery.tsx ---
"use client";
import { useState } from 'react';
import { Play, X, ChevronLeft, ChevronRight, Maximize, ArrowRight } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useRouter } from '@/i18n/navigation';
import { useTranslations } from 'next-intl';
import ScrollReveal from '@/components/ScrollReveal';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel';

const Gallery = () => {
  const t = useTranslations('gallery');
  const tGalleryPage = useTranslations('galleryPage');
  const router = useRouter();
  const [selectedMedia, setSelectedMedia] = useState<{type: 'image' | 'video', src: string, title: string} | null>(null);
  const [currentIndex, setCurrentIndex] = useState(0);

  // Using translation keys that now exist in messages
  const mediaItems = [
    {
      type: 'image' as const,
      src: 'https://images.unsplash.com/photo-1508514177221-188b1cf16e9d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      thumbnail: 'https://images.unsplash.com/photo-1508514177221-188b1cf16e9d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: tGalleryPage('projects.0.title')
    },
    {
      type: 'video' as const,
      src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',
      thumbnail: 'https://images.unsplash.com/photo-1466611653911-95081537e5b7?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: tGalleryPage('projects.1.title')
    },
    {
      type: 'image' as const,
      src: 'https://images.unsplash.com/photo-1559302504-64aae6ca6909?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      thumbnail: 'https://images.unsplash.com/photo-1559302504-64aae6ca6909?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: tGalleryPage('projects.2.title')
    },
    {
      type: 'image' as const,
      src: 'https://images.unsplash.com/photo-1509391366360-2e959784a276?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      thumbnail: 'https://images.unsplash.com/photo-1509391366360-2e959784a276?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: tGalleryPage('projects.3.title')
    },
    {
      type: 'image' as const,
      src: 'https://images.unsplash.com/photo-1513107990900-ed83fbe91e72?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      thumbnail: 'https://images.unsplash.com/photo-1513107990900-ed83fbe91e72?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: tGalleryPage('projects.5.title')
    },
    {
      type: 'video' as const,
      src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4',
      thumbnail: 'https://images.unsplash.com/photo-1497440001374-f26997328c1b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80',
      title: tGalleryPage('projects.4.title')
    }
  ];

  const openLightbox = (item: typeof mediaItems[0], index: number) => {
    setSelectedMedia(item);
    setCurrentIndex(index);
  };

  const closeLightbox = () => {
    setSelectedMedia(null);
  };

  const goToPrevious = () => {
    const newIndex = currentIndex > 0 ? currentIndex - 1 : mediaItems.length - 1;
    setCurrentIndex(newIndex);
    setSelectedMedia(mediaItems[newIndex]);
  };

  const goToNext = () => {
    const newIndex = currentIndex < mediaItems.length - 1 ? currentIndex + 1 : 0;
    setCurrentIndex(newIndex);
    setSelectedMedia(mediaItems[newIndex]);
  };

  const handleViewGallery = () => {
    router.push('/gallery');
  };

  return (
    <>
      <section id="gallery" className="py-16 bg-gradient-to-br from-slate-50 via-blue-50 to-orange-50 relative overflow-hidden">
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-20 left-1/4 w-96 h-96 bg-gradient-to-r from-purple-400/8 to-pink-400/8 rounded-full blur-3xl animate-pulse-slow"></div>
          <div className="absolute bottom-20 right-1/4 w-72 h-72 bg-gradient-to-r from-orange-400/8 to-amber-400/8 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
          {/* Header section - Group all header content */}
          <ScrollReveal direction="up" delay={0} duration={500}>
            <div className="text-center mb-12">
              <div className="inline-flex items-center px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-orange-200/50 shadow-lg mb-6">
                <span className="text-sm font-semibold text-orange-600">{t('badge')}</span>
              </div>
              
              <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6 tracking-tight">
                {t('title')}
              </h2>
              
              <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
                {t('subtitle')}
              </p>
            </div>
          </ScrollReveal>

          {/* Gallery Carousel */}
          <ScrollReveal direction="up" delay={200} duration={500}>
            <div className="mb-12">
              <Carousel className="w-full max-w-5xl mx-auto">
                <CarouselContent>
                  {mediaItems.map((item, index) => (
                    <CarouselItem key={index} className="md:basis-1/2 lg:basis-1/3">
                      <div className="p-2 h-full">
                        <div 
                          className="group relative cursor-pointer transform transition-all duration-300 hover:scale-105 hover:z-10"
                          onClick={() => openLightbox(item, index)}
                        >
                          <div className="relative overflow-hidden rounded-2xl shadow-xl border border-gray-200 bg-white">
                            <div className="aspect-[4/3] overflow-hidden">
                              <img
                                src={item.thumbnail}
                                alt={item.title}
                                className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                                loading="lazy"
                              />
                            </div>
                            
                            <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                              <div className="text-center transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                                {item.type === 'video' ? (
                                  <Play className="h-12 w-12 text-white mx-auto mb-2" />
                                ) : (
                                  <Maximize className="h-12 w-12 text-white mx-auto mb-2" />
                                )}
                                <p className="text-white font-semibold">{item.title}</p>
                              </div>
                            </div>

                            <div className="absolute top-4 right-4">
                              <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                                item.type === 'video' 
                                  ? 'bg-red-500/80 text-white' 
                                  : 'bg-blue-500/80 text-white'
                              } backdrop-blur-sm`}>
                                {item.type === 'video' ? 'Video' : 'Photo'}
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CarouselItem>
                  ))}
                </CarouselContent>
                <CarouselPrevious className="bg-white/80 border-gray-200 hover:bg-white" />
                <CarouselNext className="bg-white/80 border-gray-200 hover:bg-white" />
              </Carousel>
            </div>
          </ScrollReveal>

          {/* CTA section */}
          <ScrollReveal direction="up" delay={300} duration={500}>
            <div className="text-center">
              <Button 
                onClick={handleViewGallery}
                size="lg" 
                className="bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 px-8 py-4 text-lg font-semibold rounded-xl"
              >
                {t('viewFullGallery')}
                <ArrowRight className="ml-2 h-5 w-5" />
              </Button>
            </div>
          </ScrollReveal>
        </div>
      </section>

      {/* Lightbox Modal with enhanced animations */}
      {selectedMedia && (
        <div className="fixed inset-0 z-50 bg-black/95 backdrop-blur-md flex items-center justify-center p-4 animate-in fade-in duration-300">
          <Button
            onClick={closeLightbox}
            variant="ghost"
            size="icon"
            className="absolute top-4 right-4 z-60 text-white hover:bg-white/20 h-12 w-12"
          >
            <X className="h-6 w-6" />
          </Button>

          <Button
            onClick={goToPrevious}
            variant="ghost"
            size="icon"
            className="absolute left-4 top-1/2 -translate-y-1/2 z-60 text-white hover:bg-white/20 h-12 w-12"
          >
            <ChevronLeft className="h-6 w-6" />
          </Button>

          <Button
            onClick={goToNext}
            variant="ghost"
            size="icon"
            className="absolute right-4 top-1/2 -translate-y-1/2 z-60 text-white hover:bg-white/20 h-12 w-12"
          >
            <ChevronRight className="h-6 w-6" />
          </Button>

          <div className="max-w-6xl max-h-[90vh] w-full h-full flex items-center justify-center">
            {selectedMedia.type === 'image' ? (
              <img
                src={selectedMedia.src}
                alt={selectedMedia.title}
                className="max-w-full max-h-full object-contain rounded-lg shadow-2xl animate-in zoom-in duration-500"
              />
            ) : (
              <video
                src={selectedMedia.src}
                controls
                autoPlay
                className="max-w-full max-h-full rounded-lg shadow-2xl animate-in zoom-in duration-500"
              >
                Your browser does not support the video tag.
              </video>
            )}
          </div>

          <div className="absolute bottom-8 left-1/2 -translate-x-1/2 text-center">
            <h3 className="text-white text-xl font-semibold mb-2">{selectedMedia.title}</h3>
            <p className="text-gray-300 text-sm">
              {currentIndex + 1} of {mediaItems.length}
            </p>
          </div>
        </div>
      )}
    </>
  );
};

export default Gallery;
--- END OF FILE: ./components/Gallery.tsx ---


--- START OF FILE: ./components/Header.tsx ---
"use client";
import {Link} from '@/i18n/navigation';
import { useState, useEffect } from 'react';
import { Menu, X, Sun, Globe, Phone, Mail, MapPin } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useTranslations, useLocale } from 'next-intl';
import { useRouter, usePathname } from 'next/navigation';

const Header = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const t = useTranslations('header');
  const locale = useLocale();
  const router = useRouter();
  const pathname = usePathname();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const toggleLanguage = () => {
    const newLocale = locale === 'en' ? 'hi' : 'en';
    const pathWithoutLocale = pathname.replace(`/${locale}`, '');
    const newPathname = `/${newLocale}${pathWithoutLocale}`;
    router.push(newPathname);
  };

  // Main navigation items (center)
  const mainNavItems = [
    { href: "/about", label: t('about') },
    { href: "/services", label: t('services') },
    { href: "/gallery", label: t('gallery') },
    { href: "/testimonials", label: t('testimonials') }
  ];

  // Right side navigation items (before CTA button)
  const rightNavItems = [
    { href: "#contact", label: t('contact') },
    { href: "/faq", label: "FAQ" }
  ];

  return (
    <>
      {/* Top Bar - Clean and Minimal */}
      <div className={`bg-gray-50 border-b border-gray-200/50 py-1.5 fixed w-full top-0 z-50 transition-all duration-500 ${
        isScrolled ? '-translate-y-full opacity-0' : 'translate-y-0 opacity-100'
      }`}>
        <div className="max-w-[1600px] mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center text-sm">
            {/* Left side - Contact */}
            <div className="hidden md:flex items-center space-x-1 text-gray-600">
              <Phone className="h-3 w-3" />
              <span>{t('topBar.phone')}</span>
            </div>
            
            {/* Right side - Social Media & Language */}
            <div className="flex items-center space-x-4">
              {/* Social media links */}
              <div className="flex items-center space-x-2">
                <a href="#" className="text-gray-500 hover:text-orange-500 transition-colors" aria-label={t('social.facebook')}>
                  <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                  </svg>
                </a>
                <a href="#" className="text-gray-500 hover:text-orange-500 transition-colors" aria-label={t('social.linkedin')}>
                  <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                  </svg>
                </a>
                <a href="#" className="text-gray-500 hover:text-orange-500 transition-colors" aria-label={t('social.instagram')}>
                  <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12.017 0C5.396 0 .029 5.367.029 11.987c0 6.62 5.367 11.987 11.988 11.987 6.62 0 11.987-5.367 11.987-11.987C24.014 5.367 18.637.001 12.017.001zM8.449 16.988c-1.297 0-2.448-.49-3.323-1.297C3.85 14.724 3.85 12.78 5.126 11.504c1.276-1.276 3.091-1.453 4.543-.532 1.297.824 1.985 2.27 1.628 3.611-.356 1.341-1.628 2.405-3.023 2.405h-.825zm7.07 0c-1.297 0-2.448-.49-3.323-1.297-1.276-1.276-1.276-3.22 0-4.496 1.276-1.276 3.091-1.453 4.543-.532 1.297.824 1.985 2.27 1.628 3.611-.356 1.341-1.628 2.405-3.023 2.405h-.825z"/>
                  </svg>
                </a>
              </div>
              
              {/* Divider */}
              <div className="w-px h-4 bg-gray-300"></div>
              
              {/* Language switcher */}
              <button
                onClick={toggleLanguage}
                className="flex items-center space-x-1 px-3 py-1 text-gray-600 hover:text-orange-500 transition-colors group rounded"
                aria-label={t('languageSwitcher.toggle')}
              >
                <Globe className="h-3 w-3 group-hover:text-orange-500 transition-colors" />
                <span className="font-medium">{t('languageSwitcher.current')}</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Header - Sticks to top when scrolled */}
      <header className={`fixed w-full z-40 transition-all duration-500 ${
        isScrolled 
          ? 'top-0 bg-white/95 backdrop-blur-xl shadow-lg border-b border-white/20 py-3' 
          : 'top-8 bg-white/90 backdrop-blur-sm py-4'
      }`}>
        <div className="max-w-[1600px] mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between">
            {/* Logo Section */}
            <div className="flex-shrink-0 lg:w-72 -ml-4">
              <Link href="/" className="flex items-center space-x-3 hover:scale-105 transition-transform duration-300 group">
                <div className="bg-gradient-to-br from-orange-600 to-amber-600 p-3 rounded-xl shadow-lg group-hover:shadow-xl transition-shadow">
                  <svg className="h-8 w-8 text-white" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                    {/* Sun - positioned higher */}
                    <circle cx="16" cy="8" r="3" fill="currentColor" />
                    <g stroke="currentColor" strokeWidth="1.5" strokeLinecap="round">
                      <line x1="16" y1="2" x2="16" y2="3" />
                      <line x1="23" y1="5" x2="22" y2="6" />
                      <line x1="9" y1="5" x2="10" y2="6" />
                      <line x1="25" y1="8" x2="24" y2="8" />
                      <line x1="8" y1="8" x2="7" y2="8" />
                    </g>
                    
                    {/* Simple rooftop */}
                    <path d="M4 18 L16 14 L28 18 L28 24 L4 24 Z" fill="currentColor" opacity="0.7" />
                    
                    {/* Solar panels - simplified */}
                    <g fill="currentColor">
                      <rect x="6" y="17" width="6" height="4" rx="0.5" opacity="0.9" />
                      <rect x="13" y="15.5" width="6" height="4" rx="0.5" opacity="0.9" />
                      <rect x="20" y="17" width="6" height="4" rx="0.5" opacity="0.9" />
                    </g>
                    
                    {/* Energy rays from sun to panels */}
                    <g stroke="currentColor" strokeWidth="1" strokeLinecap="round" opacity="0.6">
                      <line x1="14" y1="11" x2="9" y2="17" />
                      <line x1="16" y1="11" x2="16" y2="15" />
                      <line x1="18" y1="11" x2="23" y2="17" />
                    </g>
                  </svg>
                </div>
                {/* Show logo text on all screen sizes */}
                <div>
                  <div className="text-lg sm:text-xl lg:text-3xl font-black bg-gradient-to-r from-orange-700 via-amber-600 to-orange-800 bg-clip-text text-transparent leading-tight tracking-tight">
                    {t('logo.main')}
                  </div>
                  <div className="text-xs sm:text-sm lg:text-base bg-gradient-to-r from-gray-600 to-gray-700 bg-clip-text text-transparent font-semibold tracking-[0.1em] sm:tracking-[0.15em] lg:tracking-[0.2em] uppercase">
                    {t('logo.tagline')}
                  </div>
                </div>
              </Link>
            </div>

            {/* Center Navigation - Absolutely centered */}
            <nav className="hidden lg:flex items-center space-x-6 flex-1 justify-center">
              {mainNavItems.map((item) => (
                <Link 
                  key={item.href}
                  href={item.href} 
                  className="text-gray-700 hover:text-orange-500 transition-all duration-300 font-medium hover:scale-105 px-3 py-2 rounded-lg hover:bg-orange-50"
                >
                  {item.label}
                </Link>
              ))}
            </nav>

            {/* Right side - Contact, FAQ & CTA */}
            <div className="hidden lg:flex items-center space-x-4 w-64 justify-end">
              {rightNavItems.map((item) => (
                <Link 
                  key={item.href}
                  href={item.href} 
                  className="text-gray-700 hover:text-orange-500 transition-all duration-300 font-medium hover:scale-105 px-3 py-2 rounded-lg hover:bg-orange-50 whitespace-nowrap"
                >
                  {item.label}
                </Link>
              ))}
              
              {/* CTA Button */}
              <Button className="bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 px-6 py-3 font-semibold rounded-lg ml-3 whitespace-nowrap">
                {t('getQuote')}
              </Button>
            </div>

            {/* Mobile Menu Button */}
            <div className="lg:hidden">
              <button
                className="p-3 rounded-xl hover:bg-gray-100 transition-colors"
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                aria-label={t('mobileMenu.toggle')}
              >
                {isMenuOpen ? <X className="h-7 w-7" /> : <Menu className="h-7 w-7" />}
              </button>
            </div>
          </div>

          {/* Mobile Menu */}
          {isMenuOpen && (
            <div className="lg:hidden mt-6">
              <div className="px-4 pt-4 pb-6 space-y-2 bg-white/95 backdrop-blur-xl border border-gray-200/50 rounded-2xl shadow-2xl">
                {/* Main navigation */}
                {mainNavItems.map((item) => (
                  <Link 
                    key={item.href}
                    href={item.href} 
                    className="block px-6 py-4 text-gray-700 hover:text-orange-500 hover:bg-orange-50/50 rounded-xl transition-all font-medium"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    {item.label}
                  </Link>
                ))}
                
                {/* Divider */}
                <div className="border-t border-gray-200/50 my-4"></div>
                
                {/* Right side navigation */}
                {rightNavItems.map((item) => (
                  <Link 
                    key={item.href}
                    href={item.href} 
                    className="block px-6 py-3 text-gray-600 hover:text-orange-500 hover:bg-orange-50/50 rounded-xl transition-all font-medium text-sm"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    {item.label}
                  </Link>
                ))}
                
                {/* Mobile actions */}
                <div className="px-3 py-6 border-t border-gray-200/50 mt-4">
                  <Button 
                    className="w-full bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white shadow-lg py-4 rounded-xl font-semibold"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    {t('getQuote')}
                  </Button>
                </div>
              </div>
            </div>
          )}
        </div>
      </header>
    </>
  );
};

export default Header;
--- END OF FILE: ./components/Header.tsx ---


--- START OF FILE: ./components/Hero.tsx ---
"use client";
import { ArrowRight, Zap, Shield, DollarSign, Play, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useTranslations } from 'next-intl';
import { useState, useEffect, useRef } from 'react';
import ScrollReveal from '@/components/ScrollReveal';

// Number animation hook (keeping for calculator)
const useCountUp = (end: number, duration: number = 2000, delay: number = 0) => {
  const [count, setCount] = useState(0);
  const [hasStarted, setHasStarted] = useState(false);

  useEffect(() => {
    if (!hasStarted) return;

    const timer = setTimeout(() => {
      let startTime: number;
      const animate = (currentTime: number) => {
        if (!startTime) startTime = currentTime;
        const progress = Math.min((currentTime - startTime) / duration, 1);
        
        const easeOutQuart = 1 - Math.pow(1 - progress, 4);
        setCount(Math.floor(easeOutQuart * end));
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        }
      };
      requestAnimationFrame(animate);
    }, delay);

    return () => clearTimeout(timer);
  }, [end, duration, delay, hasStarted]);

  return { count, start: () => setHasStarted(true) };
};

// Intersection Observer hook for calculator numbers
const useIntersectionObserver = (threshold: number = 0.1) => {
  const [isIntersecting, setIsIntersecting] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsIntersecting(true);
        }
      },
      { threshold }
    );

    if (ref.current) {
      observer.observe(ref.current);
    }

    return () => observer.disconnect();
  }, [threshold]);

  return { ref, isIntersecting };
};

const Hero = () => {
  const t = useTranslations('hero');
  const [showDemoModal, setShowDemoModal] = useState(false);
  
  // Only keep intersection observer for stats counter
  const { ref: calculatorRef, isIntersecting: calculatorVisible } = useIntersectionObserver(0.3);
  
  // Number animations for calculator
  const currentBill = useCountUp(15000, 1500, 50);
  const withSolar = useCountUp(3750, 1500, 100);
  const monthlySavings = useCountUp(11250, 1500, 150);
  const annualSavings = useCountUp(135000, 2000, 200);
  const yearSavings = useCountUp(3375000, 2500, 250);

  // Start animations when calculator becomes visible
  useEffect(() => {
    if (calculatorVisible) {
      currentBill.start();
      withSolar.start();
      monthlySavings.start();
      annualSavings.start();
      yearSavings.start();
    }
  }, [calculatorVisible]);

  const openDemoModal = () => {
    setShowDemoModal(true);
  };

  const closeDemoModal = () => {
    setShowDemoModal(false);
  };

  // Format numbers with commas
  const formatNumber = (num: number): string => {
    return new Intl.NumberFormat('en-IN').format(num);
  };

  // Benefit cards data
  const benefitCards = [
    { 
      icon: DollarSign, 
      title: t('save'), 
      desc: t('saveBills'), 
      gradient: "from-green-400 to-emerald-500"
    },
    { 
      icon: Shield, 
      title: t('warranty'), 
      desc: t('warrantyText'), 
      gradient: "from-blue-400 to-cyan-500"
    },
    { 
      icon: Zap, 
      title: t('clean'), 
      desc: t('cleanEnergy'), 
      gradient: "from-orange-400 to-red-500"
    }
  ];

  return (
    <section id="home" className="pt-28 pb-16 bg-gradient-to-br from-slate-50 via-blue-50 to-orange-50 min-h-screen flex items-center relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-orange-400/15 to-yellow-400/15 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 right-10 w-96 h-96 bg-gradient-to-r from-blue-400/15 to-cyan-400/15 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[500px] h-[500px] bg-gradient-to-r from-purple-400/8 to-pink-400/8 rounded-full blur-3xl animate-pulse delay-2000"></div>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          {/* Hero Content - Group all text content in single ScrollReveal */}
          <ScrollReveal direction="up" delay={0} duration={500}>
            <div className="space-y-6">
              <div className="space-y-5">
                <div className="inline-flex items-center px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-orange-200/50 shadow-lg">
                  <Zap className="h-4 w-4 text-orange-500 mr-2" />
                  <span className="text-sm font-semibold text-gray-700">{t('badge')}</span>
                </div>
                
                <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 leading-tight tracking-tight">
                  {t('title')}
                </h1>

                <p className="text-lg md:text-xl text-gray-600 leading-relaxed font-light max-w-xl">
                  {t('subtitle')}
                </p>
              </div>

              {/* Key Benefits - Group in single ScrollReveal */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {benefitCards.map((item, index) => (
                  <div key={index} className="group bg-white/60 backdrop-blur-sm p-4 rounded-xl border border-white/20 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                    <div className={`bg-gradient-to-br ${item.gradient} p-2 rounded-lg w-fit mb-3 group-hover:scale-110 transition-transform duration-300`}>
                      <item.icon className="h-5 w-5 text-white" />
                    </div>
                    <p className="font-bold text-xl text-gray-900 mb-1">{item.title}</p>
                    <p className="text-sm text-gray-600 font-medium">{item.desc}</p>
                  </div>
                ))}
              </div>

              {/* CTA Buttons */}
              <div className="flex flex-col sm:flex-row gap-4 pt-2">
                <Button size="lg" className="bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 px-6 py-3 text-base font-semibold rounded-xl">
                  {t('getQuoteBtn')}
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
                <Button 
                  size="lg" 
                  variant="outline" 
                  onClick={openDemoModal}
                  className="border-2 border-gray-300 text-gray-700 hover:bg-white hover:shadow-lg bg-white/60 backdrop-blur-sm transition-all duration-300 px-6 py-3 text-base font-semibold rounded-xl"
                >
                  <Play className="mr-2 h-4 w-4" />
                  {t('watchDemo')}
                </Button>
              </div>
            </div>
          </ScrollReveal>

          {/* Hero Calculator - Single ScrollReveal for entire calculator */}
          <ScrollReveal direction="right" delay={200} duration={500}>
            <div 
              ref={calculatorRef}
              className="relative"
            >
              <div className="bg-gradient-to-br from-white/80 to-white/60 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/30 hover:shadow-2xl transition-all duration-300">
                <div className="space-y-5">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-gray-900">{t('calculator.title')}</h3>
                    <div className="bg-gradient-to-r from-orange-400 to-amber-400 p-2 rounded-lg">
                      <Zap className="h-5 w-5 text-white" />
                    </div>
                  </div>
                  
                  <div className="space-y-4">
                    <div className="bg-gray-50/80 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 font-medium">{t('calculator.currentBill')}</span>
                        <span className="font-bold text-lg text-gray-900">
                          ₹{formatNumber(currentBill.count)}
                        </span>
                      </div>
                    </div>
                    
                    <div className="bg-green-50/80 backdrop-blur-sm p-4 rounded-xl border border-green-200/50">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 font-medium">{t('calculator.withSolar')}</span>
                        <span className="font-bold text-lg text-green-600">
                          ₹{formatNumber(withSolar.count)}
                        </span>
                      </div>
                    </div>
                    
                    <div className="bg-gradient-to-r from-orange-500 to-amber-500 p-5 rounded-xl text-white">
                      <div className="flex justify-between items-center mb-3">
                        <span className="font-medium">{t('calculator.monthlySavings')}</span>
                        <span className="font-bold text-xl">
                          ₹{formatNumber(monthlySavings.count)}
                        </span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="font-medium">{t('calculator.annualSavings')}</span>
                        <span className="font-bold text-xl">
                          ₹{formatNumber(annualSavings.count)}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="pt-3">
                    <div className="bg-gradient-to-r from-blue-50 to-cyan-50 p-4 rounded-xl border border-blue-200/50">
                      <p className="text-sm text-gray-600 text-center">
                        <span className="font-semibold text-gray-900">{t('calculator.yearSavings')}</span> 
                        <span className="font-bold text-lg text-blue-600 ml-2">
                          ₹{formatNumber(yearSavings.count)}
                        </span>
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </ScrollReveal>
        </div>
      </div>

      {/* Demo Modal */}
      {showDemoModal && (
        <div className="fixed inset-0 z-50 bg-black/80 backdrop-blur-md flex items-center justify-center p-4 animate-in fade-in duration-300">
          <div className="bg-white rounded-xl shadow-2xl max-w-xl w-full max-h-[70vh] overflow-y-auto animate-in slide-in-from-bottom duration-500">
            {/* Modal Header */}
            <div className="flex items-center justify-between p-5 border-b border-gray-200">
              <h3 className="text-xl font-bold text-gray-900">{t('demoModal.title')}</h3>
              <button
                onClick={closeDemoModal}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                aria-label={t('demoModal.closeButton')}
              >
                <X className="h-5 w-5 text-gray-500" />
              </button>
            </div>

            {/* Modal Content */}
            <div className="p-5">
              <div className="text-center space-y-4">
                {/* Placeholder Video Area */}
                <div className="aspect-video bg-gradient-to-br from-orange-100 to-amber-100 rounded-lg border-2 border-dashed border-orange-300 flex items-center justify-center">
                  <div className="text-center">
                    <Play className="h-12 w-12 text-orange-500 mx-auto mb-3" />
                    <h4 className="text-lg font-semibold text-gray-700 mb-2">{t('demoModal.comingSoon')}</h4>
                    <p className="text-gray-500 text-sm">
                      {t('demoModal.description')}
                    </p>
                  </div>
                </div>

                {/* Demo Features */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mt-6">
                  <div className="text-center p-3 bg-blue-50 rounded-lg">
                    <Zap className="h-6 w-6 text-blue-600 mx-auto mb-2" />
                    <h5 className="font-semibold text-gray-800 text-sm">{t('demoModal.features.0.title')}</h5>
                    <p className="text-xs text-gray-600">{t('demoModal.features.0.description')}</p>
                  </div>
                  <div className="text-center p-3 bg-green-50 rounded-lg">
                    <Shield className="h-6 w-6 text-green-600 mx-auto mb-2" />
                    <h5 className="font-semibold text-gray-800 text-sm">{t('demoModal.features.1.title')}</h5>
                    <p className="text-xs text-gray-600">{t('demoModal.features.1.description')}</p>
                  </div>
                  <div className="text-center p-3 bg-orange-50 rounded-lg">
                    <DollarSign className="h-6 w-6 text-orange-600 mx-auto mb-2" />
                    <h5 className="font-semibold text-gray-800 text-sm">{t('demoModal.features.2.title')}</h5>
                    <p className="text-xs text-gray-600">{t('demoModal.features.2.description')}</p>
                  </div>
                </div>

                {/* CTA */}
                <div className="mt-6 pt-4 border-t border-gray-200">
                  <p className="text-gray-600 mb-3 text-sm">{t('demoModal.cta.question')}</p>
                  <Button 
                    onClick={closeDemoModal}
                    className="bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white px-5 py-2 rounded-lg font-semibold"
                  >
                    {t('demoModal.cta.button')}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </section>
  );
};

export default Hero;
--- END OF FILE: ./components/Hero.tsx ---


--- START OF FILE: ./components/LanguageSwitcher.tsx ---
"use client";
import { useState } from 'react';
import { Globe, Check } from 'lucide-react';
import { useRouter, usePathname } from 'next/navigation';
import { useLocale } from 'next-intl';

const LanguageSwitcher = () => {
  const [isOpen, setIsOpen] = useState(false);
  const router = useRouter();
  const pathname = usePathname();
  const locale = useLocale();

  const languages = [
    { code: 'en', name: 'English', flag: '🇺🇸' },
    { code: 'hi', name: 'हिंदी', flag: '🇮🇳' }
  ];

  const currentLanguage = languages.find(lang => lang.code === locale);

  const switchLanguage = (newLocale: string) => {
    const newPathname = pathname.replace(`/${locale}`, `/${newLocale}`);
    router.push(newPathname);
    setIsOpen(false);
  };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center space-x-2 px-3 py-2 rounded-lg hover:bg-gray-100 transition-colors"
      >
        <Globe className="h-4 w-4" />
        <span className="text-sm font-medium">{currentLanguage?.flag} {currentLanguage?.name}</span>
      </button>

      {isOpen && (
        <div className="absolute top-full right-0 mt-2 bg-white rounded-lg shadow-xl border border-gray-200 py-2 min-w-[150px] z-50">
          {languages.map((language) => (
            <button
              key={language.code}
              onClick={() => switchLanguage(language.code)}
              className={`w-full flex items-center justify-between px-4 py-2 text-left hover:bg-gray-50 transition-colors ${
                locale === language.code ? 'bg-orange-50 text-orange-600' : 'text-gray-700'
              }`}
            >
              <div className="flex items-center space-x-2">
                <span>{language.flag}</span>
                <span className="text-sm font-medium">{language.name}</span>
              </div>
              {locale === language.code && <Check className="h-4 w-4" />}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default LanguageSwitcher;
--- END OF FILE: ./components/LanguageSwitcher.tsx ---


--- START OF FILE: ./components/LazyImage.tsx ---
"use client";
import { useState, useRef, useEffect } from 'react';
import Image from 'next/image';

interface LazyImageProps {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  className?: string;
  priority?: boolean;
  sizes?: string;
  placeholder?: 'blur' | 'empty';
  blurDataURL?: string;
  quality?: number;
}

const LazyImage = ({
  src,
  alt,
  width = 800,
  height = 600,
  className = '',
  priority = false,
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  placeholder = 'blur',
  quality = 75,
  ...props
}: LazyImageProps) => {
  const [isLoading, setIsLoading] = useState(true);
  const [hasError, setHasError] = useState(false);
  const imgRef = useRef<HTMLDivElement>(null);

  // Generate a simple blur placeholder
  const blurDataURL = `data:image/svg+xml;base64,${Buffer.from(
    `<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="g">
          <stop stop-color="#f3f4f6" offset="20%" />
          <stop stop-color="#e5e7eb" offset="50%" />
          <stop stop-color="#f3f4f6" offset="70%" />
        </linearGradient>
      </defs>
      <rect width="${width}" height="${height}" fill="url(#g)" />
    </svg>`
  ).toString('base64')}`;

  const handleLoadComplete = () => {
    setIsLoading(false);
  };

  const handleError = () => {
    setIsLoading(false);
    setHasError(true);
  };

  if (hasError) {
    return (
      <div 
        className={`bg-gray-200 flex items-center justify-center ${className}`}
        style={{ width, height }}
      >
        <span className="text-gray-500 text-sm">Image not available</span>
      </div>
    );
  }

  return (
    <div ref={imgRef} className={`relative overflow-hidden ${className}`}>
      {isLoading && (
        <div 
          className="absolute inset-0 loading-skeleton rounded"
          style={{ width, height }}
        />
      )}
      <Image
        src={src}
        alt={alt}
        width={width}
        height={height}
        priority={priority}
        sizes={sizes}
        quality={quality}
        placeholder={placeholder}
        blurDataURL={blurDataURL}
        onLoad={handleLoadComplete}
        onError={handleError}
        className={`transition-opacity duration-300 ${
          isLoading ? 'opacity-0' : 'opacity-100'
        }`}
        style={{ 
          objectFit: 'cover',
          width: '100%',
          height: '100%'
        }}
        {...props}
      />
    </div>
  );
};

export default LazyImage;
--- END OF FILE: ./components/LazyImage.tsx ---


--- START OF FILE: ./components/MediaImage.tsx ---
'use client'
import Image from 'next/image'
import { useState, useEffect } from 'react'

interface MediaReference {
  title: string
  type: 'image' | 'video'
  altText: string
  category: string
  url: string
  sizes?: {
    thumbnail: string
    medium: string
    large: string
    original: string
  }
}

interface MediaRefs {
  [key: string]: MediaReference | MediaRefs
}

interface MediaImageProps {
  mediaKey: string
  width?: number
  height?: number
  className?: string
  priority?: boolean
  sizes?: string
}

export default function MediaImage({ 
  mediaKey, 
  width = 800, 
  height = 600, 
  className = '',
  priority = false,
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw'
}: MediaImageProps) {
  const [mediaRefs, setMediaRefs] = useState<MediaRefs | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    fetch('/media-refs.json')
      .then(res => res.json())
      .then(data => {
        setMediaRefs(data)
        setLoading(false)
      })
      .catch(err => {
        setError('Failed to load media references')
        setLoading(false)
        console.error('Media refs error:', err)
      })
  }, [])

  if (loading) {
    return (
      <div className={`bg-gray-200 animate-pulse ${className}`} style={{ width, height }}>
        <div className="w-full h-full bg-gray-300 rounded"></div>
      </div>
    )
  }

  if (error || !mediaRefs) {
    return (
      <div className={`bg-gray-100 flex items-center justify-center ${className}`} style={{ width, height }}>
        <span className="text-gray-500">Image not available</span>
      </div>
    )
  }

  // Navigate to nested media reference
  const media = getNestedValue(mediaRefs, mediaKey) as MediaReference

  if (!media || media.type !== 'image') {
    return (
      <div className={`bg-gray-100 flex items-center justify-center ${className}`} style={{ width, height }}>
        <span className="text-gray-500">Image not found</span>
      </div>
    )
  }

  // Choose appropriate image size based on requested dimensions
  let imageUrl = media.url
  if (media.sizes) {
    if (width <= 400) imageUrl = media.sizes.thumbnail
    else if (width <= 800) imageUrl = media.sizes.medium
    else if (width <= 1200) imageUrl = media.sizes.large
    else imageUrl = media.sizes.original
  }

  return (
    <Image
      src={imageUrl}
      alt={media.altText}
      width={width}
      height={height}
      className={className}
      priority={priority}
      sizes={sizes}
      style={{ objectFit: 'cover' }}
    />
  )
}

// Helper function to get nested values from object
function getNestedValue(obj: any, path: string): any {
  return path.split('.').reduce((current, key) => current?.[key], obj)
}
--- END OF FILE: ./components/MediaImage.tsx ---


--- START OF FILE: ./components/MediaVideo.tsx ---
'use client'
import { useState, useEffect } from 'react'
import { Play } from 'lucide-react'

interface MediaReference {
  title: string
  type: 'image' | 'video'
  altText: string
  category: string
  url: string
}

interface MediaRefs {
  [key: string]: MediaReference | MediaRefs
}

interface MediaVideoProps {
  mediaKey: string
  width?: number
  height?: number
  className?: string
  autoPlay?: boolean
  controls?: boolean
  muted?: boolean
  loop?: boolean
  poster?: string
}

export default function MediaVideo({ 
  mediaKey, 
  width = 800, 
  height = 450,
  className = '',
  autoPlay = false,
  controls = true,
  muted = true,
  loop = false,
  poster
}: MediaVideoProps) {
  const [mediaRefs, setMediaRefs] = useState<MediaRefs | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isPlaying, setIsPlaying] = useState(false)

  useEffect(() => {
    fetch('/media-refs.json')
      .then(res => res.json())
      .then(data => {
        setMediaRefs(data)
        setLoading(false)
      })
      .catch(err => {
        setError('Failed to load media references')
        setLoading(false)
        console.error('Media refs error:', err)
      })
  }, [])

  if (loading) {
    return (
      <div className={`bg-gray-200 animate-pulse ${className}`} style={{ width, height }}>
        <div className="w-full h-full bg-gray-300 rounded flex items-center justify-center">
          <Play className="h-12 w-12 text-gray-400" />
        </div>
      </div>
    )
  }

  if (error || !mediaRefs) {
    return (
      <div className={`bg-gray-100 flex items-center justify-center ${className}`} style={{ width, height }}>
        <span className="text-gray-500">Video not available</span>
      </div>
    )
  }

  // Navigate to nested media reference
  const media = getNestedValue(mediaRefs, mediaKey) as MediaReference

  if (!media || media.type !== 'video') {
    return (
      <div className={`bg-gray-100 flex items-center justify-center ${className}`} style={{ width, height }}>
        <span className="text-gray-500">Video not found</span>
      </div>
    )
  }

  return (
    <div className={`relative ${className}`} style={{ width, height }}>
      <video
        src={media.url}
        width={width}
        height={height}
        autoPlay={autoPlay}
        controls={controls}
        muted={muted}
        loop={loop}
        poster={poster}
        className="w-full h-full object-cover rounded"
        onPlay={() => setIsPlaying(true)}
        onPause={() => setIsPlaying(false)}
      >
        Your browser does not support the video tag.
      </video>
      
      {!isPlaying && !autoPlay && (
        <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 rounded">
          <div className="bg-white bg-opacity-90 rounded-full p-4 hover:bg-opacity-100 transition-all duration-200 cursor-pointer">
            <Play className="h-8 w-8 text-gray-800 ml-1" fill="currentColor" />
          </div>
        </div>
      )}
    </div>
  )
}

// Helper function to get nested values from object
function getNestedValue(obj: any, path: string): any {
  return path.split('.').reduce((current, key) => current?.[key], obj)
}
--- END OF FILE: ./components/MediaVideo.tsx ---


--- START OF FILE: ./components/ScrollReveal.tsx ---
"use client";
import { useEffect, useRef, useState, ReactNode } from 'react';

interface ScrollRevealProps {
  children: ReactNode;
  direction?: 'up' | 'down' | 'left' | 'right' | 'scale' | 'fade';
  delay?: number;
  duration?: number;
  threshold?: number;
  className?: string;
  once?: boolean;
  disabled?: boolean; // Add option to disable animations
}

// Create a global observer to reduce the number of observers
let globalObserver: IntersectionObserver | null = null;
const observedElements = new Map<Element, () => void>();

const createGlobalObserver = () => {
  if (typeof window === 'undefined') return null;
  
  return new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const callback = observedElements.get(entry.target);
        if (callback && entry.isIntersecting) {
          callback();
          // Clean up after animation triggers
          globalObserver?.unobserve(entry.target);
          observedElements.delete(entry.target);
        }
      });
    },
    { 
      threshold: 0.1,
      rootMargin: '50px 0px' // Start animation slightly before element is visible
    }
  );
};

const ScrollReveal = ({
  children,
  direction = 'up',
  delay = 0,
  duration = 600, // Reduced from 800ms
  threshold = 0.1,
  className = '',
  once = true,
  disabled = false
}: ScrollRevealProps) => {
  const [isVisible, setIsVisible] = useState(false);
  const [shouldAnimate, setShouldAnimate] = useState(true);
  const elementRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    if (prefersReducedMotion || disabled) {
      setShouldAnimate(false);
      setIsVisible(true);
      return;
    }

    if (!globalObserver) {
      globalObserver = createGlobalObserver();
    }

    const currentElement = elementRef.current;
    if (!currentElement || !globalObserver) return;

    const handleIntersection = () => {
      // Add slight delay for staggered animations
      setTimeout(() => {
        setIsVisible(true);
      }, delay);
    };

    observedElements.set(currentElement, handleIntersection);
    globalObserver.observe(currentElement);

    return () => {
      if (currentElement && globalObserver) {
        globalObserver.unobserve(currentElement);
        observedElements.delete(currentElement);
      }
    };
  }, [delay, disabled]);

  const getAnimationClasses = () => {
    if (!shouldAnimate) return '';
    
    const baseClasses = 'transition-all ease-out';
    const durationClass = duration <= 300 ? 'duration-300' : 
                         duration <= 500 ? 'duration-500' : 
                         duration <= 700 ? 'duration-700' : 'duration-1000';
    
    if (isVisible) {
      return `${baseClasses} ${durationClass} opacity-100 translate-x-0 translate-y-0 scale-100`;
    }

    switch (direction) {
      case 'up':
        return `${baseClasses} ${durationClass} opacity-0 translate-y-4`; // Reduced from 8
      case 'down':
        return `${baseClasses} ${durationClass} opacity-0 -translate-y-4`;
      case 'left':
        return `${baseClasses} ${durationClass} opacity-0 translate-x-4`;
      case 'right':
        return `${baseClasses} ${durationClass} opacity-0 -translate-x-4`;
      case 'scale':
        return `${baseClasses} ${durationClass} opacity-0 scale-98`; // Reduced from scale-95
      case 'fade':
        return `${baseClasses} ${durationClass} opacity-0`;
      default:
        return `${baseClasses} ${durationClass} opacity-0 translate-y-4`;
    }
  };

  return (
    <div
      ref={elementRef}
      className={`${getAnimationClasses()} ${className}`}
    >
      {children}
    </div>
  );
};

export default ScrollReveal;
--- END OF FILE: ./components/ScrollReveal.tsx ---


--- START OF FILE: ./components/Services.tsx ---
"use client";
import { Home, Building, Factory, ArrowRight } from 'lucide-react';
import { Card, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useTranslations } from 'next-intl';
import { Link } from '@/i18n/navigation';
import { Button } from './ui/button';
import ScrollReveal from '@/components/ScrollReveal';

const Services = () => {
  const t = useTranslations('services');

  const services = [
    {
      Icon: Home,
      title: t('residential.title'),
      description: t('residential.description'),
      gradient: "from-blue-500 to-cyan-500"
    },
    {
      Icon: Building,
      title: t('commercial.title'),
      description: t('commercial.description'),
      gradient: "from-green-500 to-emerald-500"
    },
    {
      Icon: Factory,
      title: t('industrial.title'),
      description: t('industrial.description'),
      gradient: "from-purple-500 to-violet-500"
    }
  ];

  return (
    <section id="services" className="py-16 bg-gradient-to-br from-gray-50 to-white relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-1/4 w-72 h-72 bg-gradient-to-r from-blue-400/8 to-cyan-400/8 rounded-full blur-3xl animate-pulse-slow"></div>
        <div className="absolute bottom-20 right-1/4 w-96 h-96 bg-gradient-to-r from-purple-400/8 to-violet-400/8 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        {/* Header section - Group all header content */}
        <ScrollReveal direction="up" delay={0} duration={500}>
          <div className="text-center mb-12">
            <div className="inline-flex items-center px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-orange-200/50 shadow-lg mb-6">
              <span className="text-sm font-semibold text-orange-600">{t('badge')}</span>
            </div>
            
            <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6 tracking-tight">
              {t('title')}
            </h2>
            
            <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
              {t('subtitle')}
            </p>
          </div>
        </ScrollReveal>

        {/* Services grid - Group all cards in single ScrollReveal */}
        <ScrollReveal direction="up" delay={200} duration={500}>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
            {services.map((service, index) => (
              <Card key={index} className="group hover:shadow-2xl transition-all duration-500 border-0 bg-white/60 backdrop-blur-sm hover:-translate-y-2">
                <CardHeader className="text-center pb-4">
                  <div className={`bg-gradient-to-br ${service.gradient} w-16 h-16 rounded-2xl flex items-center justify-center mb-6 mx-auto group-hover:scale-110 transition-transform duration-500 shadow-lg`}>
                    <service.Icon className="h-8 w-8 text-white" />
                  </div>
                  <CardTitle className="text-2xl text-gray-900">{service.title}</CardTitle>
                  <CardDescription className="text-gray-600 text-base leading-relaxed">
                    {service.description}
                  </CardDescription>
                </CardHeader>
              </Card>
            ))}
          </div>
        </ScrollReveal>

        {/* CTA section */}
        <ScrollReveal direction="up" delay={400} duration={500}>
          <div className="text-center">
            <Link href="/services">
              <Button 
                size="lg" 
                className="bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 px-8 py-4 text-lg font-semibold rounded-xl"
              >
                {t('viewAll')}
                <ArrowRight className="ml-2 h-5 w-5" />
              </Button>
            </Link>
          </div>
        </ScrollReveal>
      </div>
    </section>
  );
};

export default Services;
--- END OF FILE: ./components/Services.tsx ---


--- START OF FILE: ./components/SplitLayoutContact.tsx ---
"use client";
import { useState } from 'react';
import { Phone, Mail, MapPin, Clock, Send, CheckCircle, Shield, Zap, AlertCircle, Loader } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent } from '@/components/ui/card';
import { useTranslations, useLocale } from 'next-intl';
import ScrollReveal from '@/components/ScrollReveal';

const SplitLayoutContact = () => {
  const t = useTranslations('contact');
  const locale = useLocale();
  
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    email: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState('');
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Validation functions
  const validatePhone = (phone: string) => {
    const phoneRegex = /^(\+91|91)?[\s-]?[6-9]\d{9}$/;
    return phoneRegex.test(phone.replace(/[\s-]/g, ''));
  };

  const validateEmail = (email: string) => {
    if (!email.trim()) return true;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
    }
    
    if (!formData.phone.trim()) {
      newErrors.phone = 'Phone number is required';
    } else if (!validatePhone(formData.phone)) {
      newErrors.phone = 'Please enter a valid phone number';
    }

    if (formData.email.trim() && !validateEmail(formData.email)) {
      newErrors.email = 'Please enter a valid email address';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setSubmitMessage('');

    try {
      const response = await fetch(`/${locale}/api/contact`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...formData,
          submittedAt: new Date().toISOString(),
          language: locale,
          source: 'website_contact_form'
        }),
      });

      const result = await response.json();
      
      if (response.ok) {
        setSubmitMessage(`Thank you ${formData.name}! We'll get back to you within 24 hours.`);
        
        setTimeout(() => {
          setFormData({
            name: '',
            phone: '',
            email: '',
            message: ''
          });
          setErrors({});
          setSubmitMessage('');
        }, 5000);
      } else {
        throw new Error(result.message || 'Submission failed');
      }
    } catch (error) {
      console.error('Contact form error:', error);
      setSubmitMessage('Sorry, there was an issue. Please try again or call us directly.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Extract event handlers to avoid passing them as props
  const callExpert = () => window.location.href = 'tel:+919876543210';
  const sendEmail = () => window.location.href = 'mailto:info@purvodayaenergy.com?subject=Solar Installation Inquiry';

  return (
    <section id="contact" className="py-20 bg-gradient-to-br from-orange-50 via-amber-50 to-yellow-50 relative overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 right-10 w-72 h-72 bg-gradient-to-r from-orange-400/20 to-amber-400/20 rounded-full blur-3xl animate-pulse-slow"></div>
        <div className="absolute bottom-20 left-10 w-96 h-96 bg-gradient-to-r from-yellow-400/15 to-orange-400/15 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center">
          
          {/* Left Side - Form */}
          <div className="order-2 lg:order-1">
            <ScrollReveal direction="left" delay={100}>
              <Card className="bg-white shadow-2xl border-0 rounded-3xl overflow-hidden">
                <div className="bg-gradient-to-r from-orange-500 to-amber-500 p-6">
                  <h3 className="text-2xl font-bold text-white mb-2">Contact Us</h3>
                  <p className="text-orange-100">We'll respond to your inquiry within 24 hours</p>
                </div>
                
                <CardContent className="p-8">
                  <div className="space-y-6">
                    {/* Name Field */}
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">
                        Full Name <span className="text-red-500">*</span>
                      </label>
                      <Input 
                        name="name"
                        value={formData.name}
                        onChange={handleChange}
                        placeholder="Enter your full name" 
                        className={`h-12 text-base border-2 rounded-xl ${
                          errors.name ? 'border-red-500 focus:border-red-500' : 'border-gray-200 focus:border-orange-400'
                        }`}
                        required
                      />
                      {errors.name && (
                        <p className="text-red-500 text-sm mt-1 flex items-center">
                          <AlertCircle className="h-4 w-4 mr-1" />
                          {errors.name}
                        </p>
                      )}
                    </div>

                    {/* Phone Field */}
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">
                        Phone Number <span className="text-red-500">*</span>
                      </label>
                      <Input 
                        type="tel" 
                        name="phone"
                        value={formData.phone}
                        onChange={handleChange}
                        placeholder="+91 98765 43210" 
                        className={`h-12 text-base border-2 rounded-xl ${
                          errors.phone ? 'border-red-500 focus:border-red-500' : 'border-gray-200 focus:border-orange-400'
                        }`}
                        required
                      />
                      {errors.phone && (
                        <p className="text-red-500 text-sm mt-1 flex items-center">
                          <AlertCircle className="h-4 w-4 mr-1" />
                          {errors.phone}
                        </p>
                      )}
                    </div>

                    {/* Email Field */}
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">
                        Email Address <span className="text-gray-400 text-xs">(Optional)</span>
                      </label>
                      <Input 
                        type="email" 
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        placeholder="your@email.com" 
                        className={`h-12 text-base border-2 rounded-xl ${
                          errors.email ? 'border-red-500 focus:border-red-500' : 'border-gray-200 focus:border-orange-400'
                        }`}
                      />
                      {errors.email && (
                        <p className="text-red-500 text-sm mt-1 flex items-center">
                          <AlertCircle className="h-4 w-4 mr-1" />
                          {errors.email}
                        </p>
                      )}
                    </div>

                    {/* Message Field */}
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">
                        Message <span className="text-gray-400 text-xs">(Optional)</span>
                      </label>
                      <Textarea 
                        name="message"
                        value={formData.message}
                        onChange={handleChange}
                        placeholder="Tell us about your requirements, property type, or monthly electricity bill..."
                        rows={4}
                        className="text-base border-2 rounded-xl resize-none border-gray-200 focus:border-orange-400"
                      />
                    </div>

                    {/* Submit Message */}
                    {submitMessage && (
                      <div className={`p-4 rounded-xl ${
                        submitMessage.includes('Thank you') 
                          ? 'bg-green-50 text-green-800 border border-green-200' 
                          : 'bg-red-50 text-red-800 border border-red-200'
                      }`}>
                        {submitMessage}
                      </div>
                    )}

                    {/* Submit Button */}
                    <button 
                      onClick={handleSubmit}
                      disabled={isSubmitting}
                      className="w-full bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-[1.02] h-14 text-lg font-semibold rounded-xl disabled:opacity-50 flex items-center justify-center"
                    >
                      {isSubmitting ? (
                        <>
                          <Loader className="mr-2 h-5 w-5 animate-spin" />
                          Sending Request...
                        </>
                      ) : (
                        <>
                          <Send className="mr-2 h-5 w-5" />
                          Send Message
                        </>
                      )}
                    </button>

                    {/* Trust Message */}
                    <div className="text-center pt-2">
                      <p className="text-sm text-gray-500">
                        <Phone className="inline h-4 w-4 mr-1" />
                        We'll get back to you within 24 hours
                      </p>
                      
                      <div className="flex justify-center items-center space-x-4 mt-3 text-xs text-gray-400">
                        <span>✓ No spam</span>
                        <span>✓ Free consultation</span>
                        <span>✓ Licensed professionals</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </ScrollReveal>
          </div>

          {/* Right Side - Content */}
          <div className="order-1 lg:order-2 space-y-8">
            <ScrollReveal direction="right" delay={300}>
              <div className="space-y-6">
                <div className="inline-flex items-center px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-orange-200/50 shadow-lg">
                  <span className="text-sm font-semibold text-orange-600">Ready to Go Solar?</span>
                </div>
                
                <h2 className="text-4xl md:text-5xl font-bold text-gray-900 leading-tight">
                  Switch to <span className="text-orange-500">Clean Energy</span> Today
                </h2>
                
                <p className="text-xl text-gray-600 leading-relaxed">
                  Join over 2,500 satisfied customers who have made the switch to solar energy. Get your free consultation and start saving today.
                </p>
              </div>
            </ScrollReveal>

            {/* Benefits */}
            <ScrollReveal direction="right" delay={500}>
              <div className="space-y-4">
                <div className="flex items-center space-x-4">
                  <div className="bg-green-100 p-2 rounded-full">
                    <CheckCircle className="h-6 w-6 text-green-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">Save up to 90% on electricity bills</h3>
                    <p className="text-gray-600 text-sm">Reduce your monthly costs significantly</p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-4">
                  <div className="bg-blue-100 p-2 rounded-full">
                    <Shield className="h-6 w-6 text-blue-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">25-year warranty included</h3>
                    <p className="text-gray-600 text-sm">Complete peace of mind protection</p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-4">
                  <div className="bg-orange-100 p-2 rounded-full">
                    <Zap className="h-6 w-6 text-orange-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">Professional installation</h3>
                    <p className="text-gray-600 text-sm">Completed in 1-3 days by certified experts</p>
                  </div>
                </div>
              </div>
            </ScrollReveal>

            {/* Contact Information */}
            <ScrollReveal direction="right" delay={700}>
              <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-white/20">
                <h3 className="text-lg font-bold text-gray-900 mb-4">Get in Touch</h3>
                <div className="space-y-3">
                  <button 
                    onClick={callExpert}
                    className="flex items-center space-x-3 w-full text-left hover:bg-orange-50 p-2 rounded-lg transition-colors"
                  >
                    <Phone className="h-5 w-5 text-orange-500" />
                    <div>
                      <p className="font-medium text-gray-900">+91 98765 43210</p>
                      <p className="text-sm text-gray-600">Call us for immediate assistance</p>
                    </div>
                  </button>
                  
                  <button 
                    onClick={sendEmail}
                    className="flex items-center space-x-3 w-full text-left hover:bg-blue-50 p-2 rounded-lg transition-colors"
                  >
                    <Mail className="h-5 w-5 text-blue-500" />
                    <div>
                      <p className="font-medium text-gray-900">info@purvodayaenergy.com</p>
                      <p className="text-sm text-gray-600">Email us your requirements</p>
                    </div>
                  </button>
                  
                  <div className="flex items-center space-x-3">
                    <Clock className="h-5 w-5 text-green-500" />
                    <div>
                      <p className="font-medium text-gray-900">Mon-Sat: 9AM-6PM</p>
                      <p className="text-sm text-gray-600">Sunday: Emergency calls only</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <MapPin className="h-5 w-5 text-purple-500" />
                    <div>
                      <p className="font-medium text-gray-900">Mumbai, Maharashtra</p>
                      <p className="text-sm text-gray-600">Visit our showroom</p>
                    </div>
                  </div>
                </div>
              </div>
            </ScrollReveal>
          </div>
        </div>
      </div>
    </section>
  );
};

export default SplitLayoutContact;
--- END OF FILE: ./components/SplitLayoutContact.tsx ---


--- START OF FILE: ./components/StructuredData.tsx ---
interface StructuredDataProps {
  locale: string;
  pageType?: 'home' | 'about' | 'services' | 'contact' | 'testimonials' | 'gallery';
}

export default function StructuredData({ locale, pageType = 'home' }: StructuredDataProps) {
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://yoursite.com';
  
  // Organization Schema
  const organizationData = {
    "@context": "https://schema.org",
    "@type": "Organization",
    "@id": `${baseUrl}/#organization`,
    name: "Purvodaya Energy Solutions",
    alternateName: locale === 'hi' ? "पूर्वोदय एनर्जी सॉल्यूशंस" : undefined,
    url: baseUrl,
    logo: `${baseUrl}/logo.png`,
    image: `${baseUrl}/og-image.jpg`,
    description: locale === 'hi' 
      ? "भारत में अग्रणी सौर ऊर्जा समाधान प्रदाता - आवासीय और वाणिज्यिक सौर पैनल स्थापना"
      : "Leading solar energy solutions provider in India - Residential and commercial solar panel installation",
    foundingDate: "2012",
    contactPoint: [
      {
        "@type": "ContactPoint",
        telephone: "+91-98765-43210",
        contactType: "customer service",
        availableLanguage: ["English", "Hindi"],
        areaServed: "IN"
      },
      {
        "@type": "ContactPoint",
        email: "info@purvodayaenergy.com",
        contactType: "customer service",
        availableLanguage: ["English", "Hindi"]
      }
    ],
    address: {
      "@type": "PostalAddress",
      streetAddress: "Solar Avenue, Green City",
      addressLocality: "Mumbai",
      addressRegion: "Maharashtra",
      postalCode: "400001",
      addressCountry: "IN"
    },
    geo: {
      "@type": "GeoCoordinates",
      latitude: 19.0760,
      longitude: 72.8777
    },
    sameAs: [
      "https://facebook.com/purvodayaenergy",
      "https://linkedin.com/company/purvodaya-energy",
      "https://twitter.com/purvodayaenergy"
    ],
    aggregateRating: {
      "@type": "AggregateRating",
      ratingValue: "4.9",
      reviewCount: "2500",
      bestRating: "5",
      worstRating: "1"
    }
  };

  // Local Business Schema
  const localBusinessData = {
    "@context": "https://schema.org",
    "@type": "LocalBusiness",
    "@id": `${baseUrl}/#localbusiness`,
    name: "Purvodaya Energy Solutions",
    image: [`${baseUrl}/business-image.jpg`, `${baseUrl}/solar-installation.jpg`],
    telephone: "+91-98765-43210",
    email: "info@purvodayaenergy.com",
    address: {
      "@type": "PostalAddress",
      streetAddress: "Solar Avenue, Green City",
      addressLocality: "Mumbai",
      addressRegion: "MH",
      postalCode: "400001",
      addressCountry: "IN"
    },
    geo: {
      "@type": "GeoCoordinates",
      latitude: 19.0760,
      longitude: 72.8777
    },
    openingHours: ["Mo-Fr 09:00-18:00", "Sa 09:00-16:00"],
    priceRange: "₹₹₹",
    paymentAccepted: ["Cash", "Credit Card", "Bank Transfer", "UPI"],
    currenciesAccepted: "INR",
    areaServed: [
      {
        "@type": "State",
        name: "Maharashtra"
      },
      {
        "@type": "State", 
        name: "Gujarat"
      },
      {
        "@type": "State",
        name: "Delhi"
      }
    ],
    serviceArea: {
      "@type": "GeoCircle",
      geoMidpoint: {
        "@type": "GeoCoordinates",
        latitude: 19.0760,
        longitude: 72.8777
      },
      geoRadius: "500000"
    }
  };

  // Service Schema
  const serviceData = {
    "@context": "https://schema.org",
    "@type": "Service",
    "@id": `${baseUrl}/#service`,
    name: locale === 'hi' ? "सौर ऊर्जा स्थापना सेवाएं" : "Solar Energy Installation Services",
    description: locale === 'hi' 
      ? "आवासीय और वाणिज्यिक सौर पैनल स्थापना, रखरखाव और ऊर्जा ऑडिट सेवाएं"
      : "Residential and commercial solar panel installation, maintenance, and energy audit services",
    provider: {
      "@id": `${baseUrl}/#organization`
    },
    areaServed: "IN",
    hasOfferCatalog: {
      "@type": "OfferCatalog",
      name: "Solar Energy Solutions",
      itemListElement: [
        {
          "@type": "Offer",
          itemOffered: {
            "@type": "Service",
            name: locale === 'hi' ? "आवासीय सौर स्थापना" : "Residential Solar Installation",
            description: locale === 'hi' ? "घरों के लिए कस्टम सौर समाधान" : "Custom solar solutions for homes"
          }
        },
        {
          "@type": "Offer",
          itemOffered: {
            "@type": "Service",
            name: locale === 'hi' ? "वाणिज्यिक सौर स्थापना" : "Commercial Solar Installation",
            description: locale === 'hi' ? "व्यवसायों के लिए स्केलेबल सौर समाधान" : "Scalable solar solutions for businesses"
          }
        }
      ]
    }
  };

  // FAQ Schema (for FAQ page)
  const faqData = pageType === 'home' ? {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntity: [
      {
        "@type": "Question",
        name: locale === 'hi' ? "सौर सिस्टम की लागत कितनी है?" : "How much does a solar system cost?",
        acceptedAnswer: {
          "@type": "Answer",
          text: locale === 'hi' 
            ? "सौर सिस्टम की लागत आकार और आवश्यकताओं के आधार पर अलग होती है। आवासीय सिस्टम (1-10kW) की लागत आमतौर पर ₹40,000-₹80,000 प्रति kW होती है।"
            : "Solar system costs vary based on size and requirements. Residential systems (1-10kW) typically cost ₹40,000-₹80,000 per kW."
        }
      },
      {
        "@type": "Question",
        name: locale === 'hi' ? "सौर पैनलों से मैं कितनी बचत कर सकता हूं?" : "How much can I save with solar panels?",
        acceptedAnswer: {
          "@type": "Answer",
          text: locale === 'hi'
            ? "अधिकांश ग्राहक अपने बिजली बिलों पर 70-90% की बचत करते हैं। एक उचित आकार के सौर सिस्टम के साथ आप ₹10,000-₹13,000 प्रति माह बचा सकते हैं।"
            : "Most customers save 70-90% on their electricity bills. With a properly sized solar system, you could save ₹10,000-₹13,000 per month."
        }
      }
    ]
  } : null;

  // Breadcrumb Schema
  const breadcrumbData = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    itemListElement: [
      {
        "@type": "ListItem",
        position: 1,
        name: locale === 'hi' ? "होम" : "Home",
        item: `${baseUrl}/${locale}`
      },
      ...(pageType !== 'home' ? [{
        "@type": "ListItem",
        position: 2,
        name: pageType === 'about' ? (locale === 'hi' ? 'हमारे बारे में' : 'About') :
               pageType === 'services' ? (locale === 'hi' ? 'सेवाएं' : 'Services') :
               pageType === 'contact' ? (locale === 'hi' ? 'संपर्क' : 'Contact') :
               pageType === 'testimonials' ? (locale === 'hi' ? 'समीक्षाएं' : 'Testimonials') :
               pageType === 'gallery' ? (locale === 'hi' ? 'गैलरी' : 'Gallery') : pageType,
        item: `${baseUrl}/${locale}/${pageType}`
      }] : [])
    ]
  };

  return (
    <>
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(organizationData)
        }}
      />
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(localBusinessData)
        }}
      />
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(serviceData)
        }}
      />
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(breadcrumbData)
        }}
      />
      {faqData && (
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify(faqData)
          }}
        />
      )}
    </>
  );
}

--- END OF FILE: ./components/StructuredData.tsx ---


--- START OF FILE: ./components/Testimonials.tsx ---
"use client";
import { useState } from 'react';
import { Star, Quote, ArrowRight, Play, ExternalLink } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useTranslations } from 'next-intl';
import { Link } from '@/i18n/navigation';
import ScrollReveal from '@/components/ScrollReveal';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel';

const Testimonials = () => {
  const t = useTranslations('testimonials');
  const [selectedVideo, setSelectedVideo] = useState<string | null>(null);

  // Using translation keys that now exist in messages
  const allTestimonials = [
    // Video testimonials
    {
      type: 'video',
      id: 1,
      name: "Raj Sharma",
      location: "Mumbai, Maharashtra",
      title: "From ₹25,000 to ₹3,000 Monthly Bills!",
      youtubeId: "dQw4w9WgXcQ",
      thumbnail: `https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg`,
      duration: "2:45",
      rating: 5,
      savings: "₹2,64,000/year",
      systemSize: "8kW Residential",
      gradient: "from-red-500 to-pink-500"
    },
    // Text testimonial - using existing keys from your messages
    {
      type: 'text',
      name: t('reviews.0.name'),
      location: t('reviews.0.location'),
      rating: 5,
      text: t('reviews.0.text'),
      gradient: "from-blue-500 to-cyan-500",
      project: t('reviews.0.project'),
      savings: t('reviews.0.savings')
    },
    // Video testimonial
    {
      type: 'video',
      id: 2,
      name: "Priya Patel",
      location: "Ahmedabad, Gujarat",
      title: "Best Investment We Ever Made",
      youtubeId: "9bZkp7q19f0",
      thumbnail: `https://img.youtube.com/vi/9bZkp7q19f0/maxresdefault.jpg`,
      duration: "3:12",
      rating: 5,
      savings: "₹1,80,000/year",
      systemSize: "6kW Residential",
      gradient: "from-green-500 to-emerald-500"
    },
    // Text testimonial
    {
      type: 'text',
      name: t('reviews.1.name'),
      location: t('reviews.1.location'),
      rating: 5,
      text: t('reviews.1.text'),
      gradient: "from-purple-500 to-violet-500",
      project: t('reviews.1.project'),
      savings: t('reviews.1.savings')
    },
    // Video testimonial
    {
      type: 'video',
      id: 3,
      name: "Amit Kumar",
      location: "Delhi NCR",
      title: "Professional Service, Amazing Results",
      youtubeId: "ScMzIvxBSi4",
      thumbnail: `https://img.youtube.com/vi/ScMzIvxBSi4/maxresdefault.jpg`,
      duration: "1:58",
      rating: 5,
      savings: "₹3,60,000/year",
      systemSize: "12kW Commercial",
      gradient: "from-orange-500 to-red-500"
    },
    // Text testimonial
    {
      type: 'text',
      name: t('reviews.2.name'),
      location: t('reviews.2.location'),
      rating: 5,
      text: t('reviews.2.text'),
      gradient: "from-teal-500 to-cyan-500",
      project: t('reviews.2.project'),
      savings: t('reviews.2.savings')
    }
  ];

  const openVideo = (youtubeId: string) => {
    setSelectedVideo(youtubeId);
  };

  const closeVideo = () => {
    setSelectedVideo(null);
  };

  const renderTextTestimonial = (testimonial: any, index: number) => (
    <ScrollReveal direction="up" delay={index * 100}>
      <Card className="group hover:shadow-2xl transition-all duration-500 bg-white/80 backdrop-blur-sm border-0 hover:-translate-y-2 h-full">
        <CardContent className="p-6 relative h-full flex flex-col">
          <div className={`absolute top-4 right-4 bg-gradient-to-br ${testimonial.gradient} p-2 rounded-lg opacity-20`}>
            <Quote className="h-6 w-6 text-white" />
          </div>

          <div className="flex items-center mb-4">
            {[...Array(testimonial.rating)].map((_, i) => (
              <Star key={i} className="h-5 w-5 text-yellow-400 fill-current" />
            ))}
          </div>

          <p className="text-gray-700 mb-6 leading-relaxed flex-grow">
            &quot;{testimonial.text}&quot;
          </p>

          <div className="space-y-4">
            <div className="flex justify-between items-center text-sm">
              <span className="text-gray-500">Project:</span>
              <span className="font-semibold text-gray-700">{testimonial.project}</span>
            </div>
            <div className="flex justify-between items-center text-sm">
              <span className="text-gray-500">Annual Savings:</span>
              <span className="font-semibold text-green-600">{testimonial.savings}</span>
            </div>
          </div>

          <div className="border-t border-gray-200/50 pt-4 mt-6">
            <div className="flex items-center space-x-3">
              <div className={`w-10 h-10 bg-gradient-to-br ${testimonial.gradient} rounded-full flex items-center justify-center shadow-lg`}>
                <span className="text-white font-semibold text-sm">
                  {testimonial.name.charAt(0)}
                </span>
              </div>
              <div>
                <p className="font-semibold text-gray-900">{testimonial.name}</p>
                <p className="text-gray-600 text-sm">{testimonial.location}</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </ScrollReveal>
  );

  const renderVideoTestimonial = (testimonial: any, index: number) => (
    <ScrollReveal direction="scale" delay={index * 100}>
      <Card className="group hover:shadow-2xl transition-all duration-500 bg-white/80 backdrop-blur-sm border-0 hover:-translate-y-2 h-full overflow-hidden">
        <div className="relative">
          {/* YouTube Video Thumbnail */}
          <div className="relative aspect-[16/9] overflow-hidden cursor-pointer" onClick={() => openVideo(testimonial.youtubeId)}>
            LazyImage 
              src={testimonial.thumbnail}
              alt={testimonial.name}
              className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
              loading="lazy"
            />
            
            {/* Play Button Overlay */}
            <div className="absolute inset-0 bg-black/30 flex items-center justify-center group-hover:bg-black/50 transition-all duration-300">
              <div className="relative">
                <div className="absolute inset-0 bg-red-600 rounded-full animate-pulse opacity-75"></div>
                <Button
                  size="lg"
                  className="relative bg-red-600 hover:bg-red-700 text-white border-0 rounded-full p-4 shadow-2xl transform group-hover:scale-110 transition-all duration-300"
                >
                  <Play className="h-6 w-6 ml-1" fill="white" />
                </Button>
              </div>
            </div>
            
            {/* Duration Badge */}
            <div className="absolute bottom-4 right-4 bg-black/80 text-white px-3 py-1 rounded-lg text-sm font-medium">
              {testimonial.duration}
            </div>
            
            {/* YouTube Badge */}
            <div className="absolute top-4 left-4 bg-red-600 text-white px-3 py-1 rounded-lg text-xs font-bold flex items-center">
              <ExternalLink className="h-3 w-3 mr-1" />
              YouTube
            </div>
          </div>
        </div>

        <CardContent className="p-6">
          <div className="flex items-center mb-4">
            {[...Array(testimonial.rating)].map((_, i) => (
              <Star key={i} className="h-5 w-5 text-yellow-400 fill-current" />
            ))}
          </div>
          
          <h3 className="text-lg font-bold text-gray-900 mb-2">{testimonial.title}</h3>
          
          <div className="flex items-center space-x-3 mb-4">
            <div className={`w-10 h-10 bg-gradient-to-br ${testimonial.gradient} rounded-full flex items-center justify-center shadow-lg`}>
              <span className="text-white font-semibold text-sm">
                {testimonial.name.charAt(0)}
              </span>
            </div>
            <div>
              <p className="font-semibold text-gray-900">{testimonial.name}</p>
              <p className="text-gray-600 text-sm">{testimonial.location}</p>
            </div>
          </div>

          <div className="bg-gradient-to-r from-green-50 to-blue-50 p-3 rounded-xl">
            <div className="grid grid-cols-2 gap-2 text-center">
              <div>
                <p className="text-xs text-gray-500 uppercase tracking-wider">System</p>
                <p className="font-bold text-gray-900 text-sm">{testimonial.systemSize}</p>
              </div>
              <div>
                <p className="text-xs text-gray-500 uppercase tracking-wider">Savings</p>
                <p className="font-bold text-green-600 text-sm">{testimonial.savings}</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </ScrollReveal>
  );

  return (
    <>
      <section id="testimonials" className="py-16 bg-gradient-to-br from-white to-gray-50 relative overflow-hidden">
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-20 left-1/4 w-80 h-80 bg-gradient-to-r from-green-400/8 to-emerald-400/8 rounded-full blur-3xl animate-pulse-slow"></div>
          <div className="absolute bottom-20 right-1/4 w-96 h-96 bg-gradient-to-r from-blue-400/8 to-cyan-400/8 rounded-full blur-3xl animate-pulse-slow delay-1000"></div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
          {/* Header section with ScrollReveal */}
          <div className="text-center mb-12">
            <ScrollReveal direction="up" delay={100}>
              <div className="inline-flex items-center px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-orange-200/50 shadow-lg mb-6">
                <span className="text-sm font-semibold text-orange-600">{t('badge')}</span>
              </div>
            </ScrollReveal>
            
            <ScrollReveal direction="up" delay={300}>
              <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6 tracking-tight">
                {t('title')}
              </h2>
            </ScrollReveal>
            
            <ScrollReveal direction="up" delay={500}>
              <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
                {t('subtitle')}
              </p>
            </ScrollReveal>
          </div>

          {/* Unified Carousel with ScrollReveal */}
          <ScrollReveal direction="scale" delay={700}>
            <div className="mb-12">
              <Carousel className="w-full max-w-6xl mx-auto">
                <CarouselContent>
                  {allTestimonials.map((testimonial, index) => (
                    <CarouselItem key={index} className="md:basis-1/2 lg:basis-1/3">
                      <div className="p-2 h-full">
                        {testimonial.type === 'text' 
                          ? renderTextTestimonial(testimonial, index)
                          : renderVideoTestimonial(testimonial, index)
                        }
                      </div>
                    </CarouselItem>
                  ))}
                </CarouselContent>
                <CarouselPrevious className="bg-white/80 border-gray-200 hover:bg-white" />
                <CarouselNext className="bg-white/80 border-gray-200 hover:bg-white" />
              </Carousel>
            </div>
          </ScrollReveal>

          {/* CTA section with ScrollReveal */}
          <ScrollReveal direction="up" delay={900}>
            <div className="text-center">
              <Link href="/testimonials">
                <Button size="lg" className="bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 px-8 py-4 text-lg font-semibold rounded-xl">
                  {t('readAllReviews')}
                  <ArrowRight className="ml-2 h-5 w-5" />
                </Button>
              </Link>
            </div>
          </ScrollReveal>
        </div>
      </section>

      {/* YouTube Video Modal with enhanced animations */}
      {selectedVideo && (
        <div className="fixed inset-0 z-50 bg-black/95 backdrop-blur-md flex items-center justify-center p-4 animate-in fade-in duration-300">
          <div className="relative w-full max-w-5xl aspect-[16/9]">
            <Button
              onClick={closeVideo}
              variant="ghost"
              size="icon"
              className="absolute -top-12 right-0 z-60 text-white hover:bg-white/20 h-10 w-10"
            >
              <ArrowRight className="h-6 w-6 rotate-45" />
            </Button>
            
            {/* YouTube Embed */}
            <iframe
              src={`https://www.youtube.com/embed/${selectedVideo}?autoplay=1&rel=0&modestbranding=1`}
              title="Customer Testimonial"
              className="w-full h-full rounded-lg shadow-2xl animate-in zoom-in duration-500"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
            />
          </div>
        </div>
      )}
    </>
  );
};

export default Testimonials;

--- END OF FILE: ./components/Testimonials.tsx ---


--- START OF FILE: ./components/ui/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

--- END OF FILE: ./components/ui/button.tsx ---


--- START OF FILE: ./components/ui/card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

--- END OF FILE: ./components/ui/card.tsx ---


--- START OF FILE: ./components/ui/carousel.tsx ---
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

function Carousel({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y",
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === "ArrowLeft") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowRight") {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext]
  )

  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    }
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
}

function CarouselContent({ className, ...props }: React.ComponentProps<"div">) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CarouselItem({ className, ...props }: React.ComponentProps<"div">) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
}

function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -left-12 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}

function CarouselNext({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -right-12 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

--- END OF FILE: ./components/ui/carousel.tsx ---


--- START OF FILE: ./components/ui/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

--- END OF FILE: ./components/ui/input.tsx ---


--- START OF FILE: ./components/ui/textarea.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

--- END OF FILE: ./components/ui/textarea.tsx ---


--- START OF FILE: ./components/ui/toast.tsx ---
"use client";
import { useState, useEffect } from 'react';
import { CheckCircle, XCircle, AlertCircle, X } from 'lucide-react';

interface Toast {
  id: string;
  type: 'success' | 'error' | 'warning' | 'info';
  title: string;
  message: string;
  duration?: number;
}

interface ToastProviderProps {
  children: React.ReactNode;
}

interface ToastContextType {
  showToast: (toast: Omit<Toast, 'id'>) => void;
}

import { createContext, useContext } from 'react';

const ToastContext = createContext<ToastContextType | undefined>(undefined);

export const useToast = () => {
  const context = useContext(ToastContext);
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  return context;
};

export const ToastProvider = ({ children }: ToastProviderProps) => {
  const [toasts, setToasts] = useState<Toast[]>([]);

  const showToast = (toast: Omit<Toast, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9);
    const newToast = { ...toast, id, duration: toast.duration || 5000 };
    
    setToasts(prev => [...prev, newToast]);

    // Auto remove toast after duration
    setTimeout(() => {
      removeToast(id);
    }, newToast.duration);
  };

  const removeToast = (id: string) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  };

  const getIcon = (type: Toast['type']) => {
    switch (type) {
      case 'success':
        return <CheckCircle className="h-5 w-5 text-green-600" />;
      case 'error':
        return <XCircle className="h-5 w-5 text-red-600" />;
      case 'warning':
        return <AlertCircle className="h-5 w-5 text-yellow-600" />;
      case 'info':
        return <AlertCircle className="h-5 w-5 text-blue-600" />;
      default:
        return <AlertCircle className="h-5 w-5 text-gray-600" />;
    }
  };

  const getToastStyles = (type: Toast['type']) => {
    switch (type) {
      case 'success':
        return 'bg-green-50 border-green-200 text-green-800';
      case 'error':
        return 'bg-red-50 border-red-200 text-red-800';
      case 'warning':
        return 'bg-yellow-50 border-yellow-200 text-yellow-800';
      case 'info':
        return 'bg-blue-50 border-blue-200 text-blue-800';
      default:
        return 'bg-gray-50 border-gray-200 text-gray-800';
    }
  };

  return (
    <ToastContext.Provider value={{ showToast }}>
      {children}
      
      {/* Toast Container */}
      <div className="fixed top-4 right-4 z-50 space-y-2">
        {toasts.map((toast) => (
          <div
            key={toast.id}
            className={`
              max-w-sm w-full rounded-lg border p-4 shadow-lg
              transform transition-all duration-300 ease-in-out
              animate-in slide-in-from-right
              ${getToastStyles(toast.type)}
            `}
          >
            <div className="flex items-start space-x-3">
              <div className="flex-shrink-0">
                {getIcon(toast.type)}
              </div>
              <div className="flex-1 min-w-0">
                <h4 className="text-sm font-semibold">{toast.title}</h4>
                <p className="text-sm mt-1 leading-relaxed">{toast.message}</p>
              </div>
              <button
                onClick={() => removeToast(toast.id)}
                className="flex-shrink-0 ml-4 p-1 rounded-full hover:bg-black/5 transition-colors"
              >
                <X className="h-4 w-4" />
              </button>
            </div>
          </div>
        ))}
      </div>
    </ToastContext.Provider>
  );
};

// Hook for easy toast usage
export const useContactToast = () => {
  const { showToast } = useToast();

  const showSuccessToast = (message: string, title = 'Success!') => {
    showToast({
      type: 'success',
      title,
      message,
      duration: 6000
    });
  };

  const showErrorToast = (message: string, title = 'Error') => {
    showToast({
      type: 'error',
      title,
      message,
      duration: 8000
    });
  };

  const showInfoToast = (message: string, title = 'Info') => {
    showToast({
      type: 'info',
      title,
      message,
      duration: 5000
    });
  };

  return {
    showSuccessToast,
    showErrorToast,
    showInfoToast
  };
};
--- END OF FILE: ./components/ui/toast.tsx ---


--- START OF FILE: ./components/WebVitals.tsx ---
'use client';
import { useEffect } from 'react';

export default function WebVitals() {
  useEffect(() => {
    if (process.env.NODE_ENV === 'production') {
      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
        const sendToAnalytics = (metric: any) => {
          // Send to your analytics service
          console.log('Web Vital:', metric);
          
          // Example: Send to Google Analytics
          if (typeof gtag !== 'undefined') {
            gtag('event', metric.name, {
              event_category: 'Web Vitals',
              event_label: metric.id,
              value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),
              non_interaction: true,
            });
          }
        };

        getCLS(sendToAnalytics);
        getFID(sendToAnalytics);
        getFCP(sendToAnalytics);
        getLCP(sendToAnalytics);
        getTTFB(sendToAnalytics);
      });
    }
  }, []);

  return null;
}
--- END OF FILE: ./components/WebVitals.tsx ---


--- START OF FILE: ./components/_PerformanceMonitor.tsx ---
"use client";

// Performance monitor disabled to avoid build issues
const PerformanceMonitor = () => {
  return null;
};

export default PerformanceMonitor;
--- END OF FILE: ./components/_PerformanceMonitor.tsx ---


--- START OF FILE: ./i18n/navigation.ts ---
import {createNavigation} from 'next-intl/navigation';
import {routing} from './routing';
 
// Lightweight wrappers around Next.js' navigation
// APIs that consider the routing configuration
export type Locale = (typeof routing.locales)[number];
export const {Link, redirect, usePathname, useRouter, getPathname} =
  createNavigation(routing);
--- END OF FILE: ./i18n/navigation.ts ---


--- START OF FILE: ./i18n/request.ts ---
import {getRequestConfig} from 'next-intl/server';
import {hasLocale} from 'next-intl';
import {routing} from './routing';
 
export default getRequestConfig(async ({requestLocale}) => {
  // Typically corresponds to the `[locale]` segment
  const requested = await requestLocale;
  let locale = hasLocale(routing.locales, requested)
    ? requested
    : routing.defaultLocale;
 
  if (!locale || !routing.locales.includes(locale as any)) {
    locale = routing.defaultLocale;
  }

  return {
    locale,
    messages: (await import(`@/messages/${locale}.json`)).default,
    timeZone: 'Asia/Kolkata',
    now: new Date()
  };
});
--- END OF FILE: ./i18n/request.ts ---


--- START OF FILE: ./i18n/routing.ts ---
// i18n/routing.ts - Already looks good, but ensure this configuration:
import {defineRouting} from 'next-intl/routing';

export const routing = defineRouting({
  locales: ['en', 'hi'],
  defaultLocale: 'en',
  pathnames: {
    '/': '/',
    '/about': {
      en: '/about',
      hi: '/hmare-bare-mein'
    },
    '/services': {
      en: '/services',
      hi: '/sevayen'
    },
     '/gallery': {
      en: '/gallery',
      hi: '/gallery'
    },
    '/contact': {
      en: '/contact',
      hi: '/sampark'
    }
  }
});
--- END OF FILE: ./i18n/routing.ts ---


--- START OF FILE: ./lib/sanity.js ---
import { createClient } from '@sanity/client'
import imageUrlBuilder from '@sanity/image-url'

if (!process.env.NEXT_PUBLIC_SANITY_PROJECT_ID) {
  throw new Error('Missing NEXT_PUBLIC_SANITY_PROJECT_ID')
}

if (!process.env.NEXT_PUBLIC_SANITY_DATASET) {
  throw new Error('Missing NEXT_PUBLIC_SANITY_DATASET')
}

const client = createClient({
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,
  useCdn: true,
  apiVersion: '2024-01-01',
  token: process.env.SANITY_API_TOKEN
})

// Helper for generating image URLs
const builder = imageUrlBuilder(client)

function urlFor(source) {
  return builder.image(source)
}

// Helper to get optimized image URL
function getImageUrl(source, width = 800, height = 600) {
  return urlFor(source)
    .width(width)
    .height(height)
    .format('webp')
    .url()
}

// Export using ES modules syntax
export { client, urlFor, getImageUrl }

// For backward compatibility, also export as default
export default {
  client,
  urlFor,
  getImageUrl
}
--- END OF FILE: ./lib/sanity.js ---


--- START OF FILE: ./lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

--- END OF FILE: ./lib/utils.ts ---


--- START OF FILE: ./middleware.ts ---
import { NextRequest, NextResponse } from 'next/server';
import createMiddleware from 'next-intl/middleware';
import { routing } from './i18n/routing';

// Create the next-intl middleware
const handleI18nRouting = createMiddleware(routing);

// Security headers configuration
function getSecurityHeaders(request: NextRequest, nonce: string) {
  // Content Security Policy
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'strict-dynamic' ${
      process.env.NODE_ENV === 'development' ? "'unsafe-eval'" : ''
    } https://www.youtube.com https://www.googletagmanager.com;
    style-src 'self' 'nonce-${nonce}' 'unsafe-inline' https://fonts.googleapis.com;
    img-src 'self' blob: data: https://images.unsplash.com https://img.youtube.com https://cdn.sanity.io;
    font-src 'self' https://fonts.gstatic.com;
    connect-src 'self' https://api.sanity.io https://cdn.sanity.io https://api.sendgrid.com;
    media-src 'self' https://commondatastorage.googleapis.com;
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    frame-src https://www.youtube.com https://youtube.com;
    worker-src 'self' blob:;
    manifest-src 'self';
    ${process.env.NODE_ENV === 'production' ? 'upgrade-insecure-requests;' : ''}
  `;

  // Clean up CSP header
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim();

  return {
    // Content Security Policy
    'Content-Security-Policy': contentSecurityPolicyHeaderValue,
    // Strict Transport Security (only in production)
    ...(process.env.NODE_ENV === 'production' && {
      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',
    }),
    // XSS Protection
    'X-Content-Type-Options': 'nosniff',
    // Clickjacking Protection  
    'X-Frame-Options': 'DENY',
    // Referrer Policy
    'Referrer-Policy': 'strict-origin-when-cross-origin',
    // Permissions Policy
    'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), browsing-topics=()',
    // Cross-Origin Policies
    'Cross-Origin-Opener-Policy': 'same-origin',
    'Cross-Origin-Embedder-Policy': 'require-corp',
    // Remove powered by header
    'X-Powered-By': '',
  };
}

export default function middleware(request: NextRequest) {
  // Skip middleware for static files and API routes
  if (
    request.nextUrl.pathname.startsWith('/_next') ||
    request.nextUrl.pathname.startsWith('/api') ||
    request.nextUrl.pathname.startsWith('/static') ||
    request.nextUrl.pathname.includes('.') // Files with extensions
  ) {
    return NextResponse.next();
  }

  // Generate nonce for CSP
  const nonce = Buffer.from(crypto.randomUUID()).toString('base64');

  // Get security headers
  const securityHeaders = getSecurityHeaders(request, nonce);

  // Create request headers with nonce
  const requestHeaders = new Headers(request.headers);
  requestHeaders.set('x-nonce', nonce);

  // Add security headers to request
  Object.entries(securityHeaders).forEach(([key, value]) => {
    requestHeaders.set(key, value);
  });

  // Handle internationalization routing
  const response = handleI18nRouting(
    new NextRequest(request.url, {
      headers: requestHeaders,
    })
  );

  // Add security headers to response
  Object.entries(securityHeaders).forEach(([key, value]) => {
    response.headers.set(key, value);
  });

  // Add nonce to response headers for use in components
  response.headers.set('x-nonce', nonce);

  return response;
}

export const config = {
  // Match only internationalized pathnames and exclude static files
  matcher: [
    // Match all pathnames except for
    // - … if they start with `/api`, `/_next` or `/_vercel`
    // - … the ones containing a dot (e.g. `favicon.ico`)
    '/((?!api|_next|_vercel|.*\\..*).*)',
  ],
};
--- END OF FILE: ./middleware.ts ---


--- START OF FILE: ./next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

--- END OF FILE: ./next-env.d.ts ---


--- START OF FILE: ./next.config.ts ---
import createNextIntlPlugin from 'next-intl/plugin';

const withNextIntl = createNextIntlPlugin();

/** @type {import('next').NextConfig} */
const nextConfig = {
  // COMPLETELY BYPASS LINTING AND TYPE CHECKING FOR DEPLOYMENT
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },

  // Enable experimental features for better performance
  experimental: {
    optimizeCss: true,
    optimizePackageImports: ['lucide-react'],
    esmExternals: 'loose',
  },

  // Basic image optimization
  images: {
    formats: ['image/webp', 'image/avif'],
    domains: [
      'images.unsplash.com',
      'img.youtube.com',
      'cdn.sanity.io',
      'commondatastorage.googleapis.com'
    ],
    dangerouslyAllowSVG: true,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  },

  // Compression
  compress: true,

  // Disable powered by header
  poweredByHeader: false,

  // Environment variables
  env: {
    NEXT_TELEMETRY_DISABLED: '1',
  },

  // Basic security headers
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
        ],
      },
    ];
  },

  // Basic redirects
  async redirects() {
    return [
      {
        source: '/home',
        destination: '/',
        permanent: true,
      },
    ];
  },
};

export default withNextIntl(nextConfig);
--- END OF FILE: ./next.config.ts ---


--- START OF FILE: ./package.json ---
{
  "name": "pes-web",
  "type": "module",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "npm run generate-content-safe && next build",
    "build-fast": "next build",
    "generate-content": "npm run generate-translations && npm run generate-media",
    "generate-content-safe": "npm run generate-translations-safe && npm run generate-media-safe",
    "generate-translations": "node scripts/generate-translations.js",
    "generate-translations-safe": "node scripts/generate-translations.js || echo 'Translations generation skipped'",
    "generate-media": "node scripts/generate-media-refs.js",
    "generate-media-safe": "node scripts/generate-media-refs.js || echo 'Media refs generation skipped'",
    "import-translations": "node scripts/import-existing-translations.js",
    "fix-translations": "node scripts/import-missing-translations.js && npm run generate-translations",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-slot": "^1.2.3",
    "@sanity/client": "^7.6.0",
    "@sanity/image-url": "^1.1.0",
    "@sendgrid/mail": "^8.1.5",
    "@tanstack/react-query": "^5.80.7",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "critters": "^0.0.23",
    "embla-carousel-react": "^8.6.0",
    "lucide-react": "^0.516.0",
    "next": "15.3.3",
    "next-intl": "^4.1.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.3.1",
    "web-vitals": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.3",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.4",
    "typescript": "^5"
  }
}

--- END OF FILE: ./package.json ---


--- START OF FILE: ./schemas/translation.js ---
const tranlations = {
  name: 'translation',
  title: 'Translations',
  type: 'document',
  fields: [
    {
      name: 'key',
      title: 'Translation Key',
      type: 'string',
      description: 'Dot notation key (e.g., hero.title, services.residential.title)',
      validation: Rule => Rule.required()
    },
    {
      name: 'category',
      title: 'Category',
      type: 'string',
      options: {
        list: [
          { title: 'Hero Section', value: 'hero' },
          { title: 'Services', value: 'services' },
          { title: 'About', value: 'about' },
          { title: 'Testimonials', value: 'testimonials' },
          { title: 'Contact', value: 'contact' },
          { title: 'Footer', value: 'footer' },
          { title: 'Header', value: 'header' },
          { title: 'FAQ', value: 'faq' },
          { title: 'Gallery', value: 'gallery' },
          { title: 'Common', value: 'common' }
        ]
      }
    },
    {
      name: 'english',
      title: 'English Text',
      type: 'text',
      validation: Rule => Rule.required()
    },
    {
      name: 'hindi',
      title: 'Hindi Text',
      type: 'text',
      validation: Rule => Rule.required()
    },
    {
      name: 'context',
      title: 'Context/Notes',
      type: 'text',
      description: 'Additional context for translators'
    },
    {
      name: 'isRichText',
      title: 'Contains Rich Text',
      type: 'boolean',
      description: 'Check if this text contains formatting like bold, italic, etc.'
    },
    {
      name: 'variables',
      title: 'Variables',
      type: 'array',
      of: [{ type: 'string' }],
      description: 'Variables used in this translation (e.g., {firstName}, {total})'
    }
  ],
  preview: {
    select: {
      title: 'key',
      subtitle: 'english',
      category: 'category'
    },
    prepare({ title, subtitle, category }) {
      return {
        title: title,
        subtitle: `${category}: ${subtitle?.slice(0, 50)}...`
      }
    }
  },
  orderings: [
    {
      title: 'By Category',
      name: 'categoryOrder',
      by: [
        { field: 'category', direction: 'asc' },
        { field: 'key', direction: 'asc' }
      ]
    }
  ]
}

export default tranlations;
--- END OF FILE: ./schemas/translation.js ---


--- START OF FILE: ./scripts/extract-translations.js ---
// 🚀 BULLETPROOF TRANSLATION KEY EXTRACTOR
// This script scans your entire codebase and extracts ALL translation keys
// Save this as: scripts/extract-translation-keys.js

import { existsSync, readdirSync, statSync, readFileSync, mkdirSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';

// Configuration
const CONFIG = {
  // Directories to scan for translation keys
  scanDirs: [
    'app',
    'components', 
    'pages',
    'src'
  ],
  // File extensions to scan
  extensions: ['.tsx', '.ts', '.jsx', '.js'],
  // Translation patterns to look for
  patterns: [
    // useTranslations('namespace')
    /useTranslations\(['"`]([^'"`]+)['"`]\)/g,
    // t('key') or t(`key`)
    /\bt\(['"`]([^'"`]+)['"`]\)/g,
    // t("key") with various quote types
    /\bt\(["'`]([^"'`]+)["'`]/g,
    // getTranslations('namespace')
    /getTranslations\(['"`]([^'"`]+)['"`]\)/g,
  ],
  // Output files
  outputFiles: {
    en: 'messages/en.json',
    hi: 'messages/hi.json'
  }
};

class TranslationKeyExtractor {
  constructor() {
    this.foundKeys = new Set();
    this.namespaces = new Set();
    this.keyStructure = {};
  }

  // Main extraction function
  async extractAllKeys() {
    console.log('🔍 Scanning codebase for translation keys...');
    
    for (const dir of CONFIG.scanDirs) {
      if (existsSync(dir)) {
        await this.scanDirectory(dir);
      }
    }
    
    console.log(`✅ Found ${this.foundKeys.size} unique translation keys`);
    console.log(`📁 Found ${this.namespaces.size} namespaces`);
    
    return this.buildTranslationStructure();
  }

  // Recursively scan directory
  async scanDirectory(dirPath) {
    const items = readdirSync(dirPath);
    
    for (const item of items) {
      const fullPath = join(dirPath, item);
      const stat = statSync(fullPath);
      
      if (stat.isDirectory()) {
        // Skip node_modules and .next directories
        if (!['node_modules', '.next', '.git', 'dist', 'build'].includes(item)) {
          await this.scanDirectory(fullPath);
        }
      } else if (stat.isFile()) {
        // Check if file has valid extension
        if (CONFIG.extensions.some(ext => fullPath.endsWith(ext))) {
          await this.scanFile(fullPath);
        }
      }
    }
  }

  // Scan individual file for translation keys
  async scanFile(filePath) {
    try {
      const content = readFileSync(filePath, 'utf8');
      console.log(`📄 Scanning: ${filePath}`);
      
      // Extract namespace usage patterns
      this.extractNamespaces(content);
      
      // Extract translation key usage patterns
      this.extractTranslationKeys(content);
      
    } catch (error) {
      console.warn(`⚠️  Could not read file: ${filePath}`, error.message);
    }
  }

  // Extract namespaces from useTranslations('namespace') calls
  extractNamespaces(content) {
    const namespacePattern = /useTranslations\(['"`]([^'"`]+)['"`]\)/g;
    let match;
    
    while ((match = namespacePattern.exec(content)) !== null) {
      const namespace = match[1];
      this.namespaces.add(namespace);
      console.log(`📝 Found namespace: ${namespace}`);
    }
  }

  // Extract translation keys from t('key') calls
  extractTranslationKeys(content) {
    for (const pattern of CONFIG.patterns) {
      let match;
      const regex = new RegExp(pattern.source, pattern.flags);
      
      while ((match = regex.exec(content)) !== null) {
        const key = match[1];
        if (key && !key.includes('${') && !key.includes('`')) {
          this.foundKeys.add(key);
          console.log(`🔑 Found key: ${key}`);
        }
      }
    }
  }

  // Build nested structure from flat keys
  buildTranslationStructure() {
    const structure = {};
    
    // Convert flat keys to nested structure
    for (const key of this.foundKeys) {
      this.setNestedValue(structure, key, this.generatePlaceholderText(key));
    }
    
    // Add common structures based on found namespaces
    for (const namespace of this.namespaces) {
      if (!structure[namespace]) {
        structure[namespace] = {};
      }
    }
    
    return structure;
  }

  // Set nested value in object using dot notation
  setNestedValue(obj, path, value) {
    const keys = path.split('.');
    let current = obj;
    
    for (let i = 0; i < keys.length - 1; i++) {
      const key = keys[i];
      if (!(key in current)) {
        current[key] = {};
      }
      current = current[key];
    }
    
    current[keys[keys.length - 1]] = value;
  }

  // Generate placeholder text for keys
  generatePlaceholderText(key) {
    // Convert camelCase/kebab-case to readable text
    return key
      .split('.')
      .pop() // Get last part of the key
      .replace(/([A-Z])/g, ' $1') // Add space before capital letters
      .replace(/[-_]/g, ' ') // Replace hyphens and underscores with spaces
      .replace(/^\w/, c => c.toUpperCase()) // Capitalize first letter
      .trim();
  }
}

// Enhanced structure builder for common patterns
class StructureEnhancer {
  static enhance(baseStructure) {
    const enhanced = { ...baseStructure };
    
    // Add common page structures
    const commonPages = ['about', 'services', 'gallery', 'testimonials', 'contact', 'faq'];
    commonPages.forEach(page => {
      if (!enhanced[`${page}Page`]) {
        enhanced[`${page}Page`] = {
          title: `${page.charAt(0).toUpperCase() + page.slice(1)} Page`,
          subtitle: `Welcome to our ${page} page`,
          backToHome: 'Back to Home'
        };
      }
    });

    // Add common component structures
    if (!enhanced.header) {
      enhanced.header = {
        companyName: 'Purvodaya Energy Solutions',
        home: 'Home',
        about: 'About',
        services: 'Services',
        contact: 'Contact',
        getQuote: 'Get Free Quote'
      };
    }

    if (!enhanced.footer) {
      enhanced.footer = {
        copyright: '© 2024 Purvodaya Energy Solutions. All rights reserved.',
        contact: {
          phone: '+91 98765 43210',
          email: 'info@purvodayaenergy.com'
        }
      };
    }

    return enhanced;
  }
}

// Main execution function
async function main() {
  try {
    console.log('🚀 Starting Translation Key Extraction...\n');
    
    const extractor = new TranslationKeyExtractor();
    const extractedStructure = await extractor.extractAllKeys();
    
    // Enhance with common patterns
    const enhancedStructure = StructureEnhancer.enhance(extractedStructure);
    
    // Generate files
    await generateTranslationFiles(enhancedStructure);
    
    console.log('\n✅ Translation extraction completed successfully!');
    console.log('\n📋 Summary:');
    console.log(`   • Keys found: ${extractor.foundKeys.size}`);
    console.log(`   • Namespaces: ${extractor.namespaces.size}`);
    console.log(`   • Files generated: ${Object.keys(CONFIG.outputFiles).length}`);
    
  } catch (error) {
    console.error('❌ Error during extraction:', error);
    process.exit(1);
  }
}

// Generate translation files
async function generateTranslationFiles(structure) {
  console.log('\n📝 Generating translation files...');
  
  // Ensure messages directory exists
  const messagesDir = dirname(CONFIG.outputFiles.en);
  if (!existsSync(messagesDir)) {
    mkdirSync(messagesDir, { recursive: true });
  }
  
  // Generate English file
  const enContent = JSON.stringify(structure, null, 2);
  writeFileSync(CONFIG.outputFiles.en, enContent);
  console.log(`✅ Generated: ${CONFIG.outputFiles.en}`);
  
  // Generate Hindi file (copy structure with Hindi placeholders)
  const hiStructure = translateStructureToHindi(structure);
  const hiContent = JSON.stringify(hiStructure, null, 2);
  writeFileSync(CONFIG.outputFiles.hi, hiContent);
  console.log(`✅ Generated: ${CONFIG.outputFiles.hi}`);
}

// Translate structure to Hindi (placeholder function)
function translateStructureToHindi(structure) {
  // For now, copy the English structure
  // In a real implementation, you'd integrate with a translation service
  return JSON.parse(JSON.stringify(structure));
}

// Add missing key checker
class MissingKeyChecker {
  static checkMissingKeys(extractedKeys, existingTranslations) {
    const missing = [];
    
    for (const key of extractedKeys) {
      if (!this.hasNestedKey(existingTranslations, key)) {
        missing.push(key);
      }
    }
    
    return missing;
  }
  
  static hasNestedKey(obj, key) {
    const keys = key.split('.');
    let current = obj;
    
    for (const k of keys) {
      if (current && typeof current === 'object' && k in current) {
        current = current[k];
      } else {
        return false;
      }
    }
    
    return true;
  }
}

// Export for use in other scripts
export default {
  TranslationKeyExtractor,
  StructureEnhancer,
  MissingKeyChecker,
  CONFIG
};

// Run if called directly
// if (require.main === module) {

// }

if (import.meta.url.endsWith(process.argv[1])) {
    main();
}
--- END OF FILE: ./scripts/extract-translations.js ---


--- START OF FILE: ./scripts/generate-media-refs.js ---
// scripts/generate-media-refs.js
import { createClient } from '@sanity/client'
import imageUrlBuilder from '@sanity/image-url'
import { writeFileSync, mkdirSync, existsSync, readFileSync } from 'fs'
import { join } from 'path'

// Simple .env.local loader (no dependencies needed)
function loadEnvFile() {
  const envPath = join(process.cwd(), '.env.local')
  
  if (existsSync(envPath)) {
    const envContent = readFileSync(envPath, 'utf8')
    const lines = envContent.split('\n')
    
    lines.forEach(line => {
      const trimmed = line.trim()
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=')
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').replace(/^["']|["']$/g, '') // Remove quotes
          process.env[key.trim()] = value.trim()
        }
      }
    })
    
    console.log('✅ Loaded environment variables from .env.local')
  } else {
    console.log('⚠️  .env.local file not found')
    console.log('📝 Create .env.local with your Sanity credentials to use media references')
    console.log('🔄 For now, skipping media references generation...')
    process.exit(0)
  }
}

// Load environment variables
loadEnvFile()

// Validate Sanity credentials
if (!process.env.NEXT_PUBLIC_SANITY_PROJECT_ID || !process.env.NEXT_PUBLIC_SANITY_DATASET) {
  console.log('⚠️  Sanity credentials not configured')
  console.log('📝 Media references require Sanity setup')
  console.log('💡 Your website works fine without media references')
  console.log('🔄 Skipping media references generation...')
  
  // Create empty media refs file for development
  const mediaRefs = {
    "_info": "Media references not configured - using fallback",
    "_note": "Add Sanity credentials to use dynamic media",
    "_generated": new Date().toISOString()
  }
  
  const publicDir = join(process.cwd(), 'public')
  if (!existsSync(publicDir)) {
    mkdirSync(publicDir, { recursive: true })
  }
  
  writeFileSync(
    join(publicDir, 'media-refs.json'),
    JSON.stringify(mediaRefs, null, 2)
  )
  
  console.log('✅ Created fallback media-refs.json file')
  process.exit(0)
}

// Create Sanity client
const client = createClient({
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,
  useCdn: true,
  apiVersion: '2024-01-01',
  token: process.env.SANITY_API_TOKEN
})

// Helper for generating image URLs
const builder = imageUrlBuilder(client)

function urlFor(source) {
  return builder.image(source)
}

function getImageUrl(source, width = 800, height = 600) {
  return urlFor(source)
    .width(width)
    .height(height)
    .format('webp')
    .url()
}

async function generateMediaReferences() {
  console.log('🖼️ Generating media references from Sanity...')
  
  try {
    // Test connection first
    console.log('🔍 Testing Sanity connection...')
    await client.fetch('*[_type == "mediaAsset"][0..1]')
    console.log('✅ Connected to Sanity!')

    // Fetch all media assets from Sanity
    const mediaAssets = await client.fetch(`
      *[_type == "mediaAsset"] {
        key,
        title,
        type,
        file,
        altText,
        category
      }
    `)

    console.log(`📊 Found ${mediaAssets.length} media assets`)

    if (mediaAssets.length === 0) {
      console.log('📝 No media assets found in Sanity')
      console.log('💡 To use media references:')
      console.log('1. Create "mediaAsset" documents in your Sanity Studio')
      console.log('2. Add images/videos with proper schema')
      console.log('3. Re-run this script')
      
      // Create empty media refs file
      const mediaRefs = {
        "_info": "No media assets found. Add media to Sanity and regenerate.",
        "_generated": new Date().toISOString()
      }
      
      const publicDir = join(process.cwd(), 'public')
      if (!existsSync(publicDir)) {
        mkdirSync(publicDir, { recursive: true })
      }
      
      writeFileSync(
        join(publicDir, 'media-refs.json'),
        JSON.stringify(mediaRefs, null, 2)
      )
      
      console.log('✅ Created empty media-refs.json file')
      return
    }

    // Build media references object
    const mediaRefs = {
      "_info": "Generated media references from Sanity",
      "_generated": new Date().toISOString(),
      "_count": mediaAssets.length
    }

    mediaAssets.forEach(({ key, title, type, file, altText, category }) => {
      if (!key || !file) {
        console.log(`⚠️  Skipping asset without key or file: ${title}`)
        return
      }

      const mediaData = {
        title: title || 'Untitled',
        type: type || 'image',
        altText: altText || title || 'Media asset',
        category: category || 'general'
      }

      if (type === 'image' && file) {
        mediaData.url = getImageUrl(file)
        mediaData.sizes = {
          thumbnail: getImageUrl(file, 400, 300),
          medium: getImageUrl(file, 800, 600),
          large: getImageUrl(file, 1200, 900),
          original: getImageUrl(file, 1920, 1080)
        }
      } else if (type === 'video' && file?.asset?.url) {
        mediaData.url = file.asset.url
      } else {
        console.log(`⚠️  Skipping asset with invalid file structure: ${title}`)
        return
      }

      setNestedProperty(mediaRefs, key, mediaData)
    })

    // Ensure public directory exists
    const publicDir = join(process.cwd(), 'public')
    if (!existsSync(publicDir)) {
      mkdirSync(publicDir, { recursive: true })
    }

    // Write media references file
    writeFileSync(
      join(publicDir, 'media-refs.json'),
      JSON.stringify(mediaRefs, null, 2)
    )

    console.log('✅ Media references generated successfully!')
    console.log(`🖼️ Generated ${mediaAssets.length} media references`)
    console.log(`📁 Saved to: public/media-refs.json`)
    console.log('\n💡 Usage in components:')
    console.log('import MediaImage from "@/components/MediaImage"')
    console.log('<MediaImage mediaKey="hero.mainImage" width={800} height={600} />')

  } catch (error) {
    console.error('❌ Error generating media references:', error.message)
    
    if (error.message.includes('mediaAsset')) {
      console.log('\n📝 Media Asset Schema Missing:')
      console.log('It looks like you don\'t have mediaAsset documents in Sanity.')
      console.log('This is optional - your website works fine without media references.')
      console.log('\nTo set up media assets:')
      console.log('1. Create mediaAsset schema in Sanity Studio')
      console.log('2. Add media documents with key, title, type, and file fields')
      console.log('3. Re-run this script')
    }
    
    // Create fallback empty file
    try {
      const publicDir = join(process.cwd(), 'public')
      if (!existsSync(publicDir)) {
        mkdirSync(publicDir, { recursive: true })
      }
      
      const fallbackRefs = {
        "_info": "Media references unavailable - using fallback",
        "_error": error.message,
        "_generated": new Date().toISOString()
      }
      
      writeFileSync(
        join(publicDir, 'media-refs.json'),
        JSON.stringify(fallbackRefs, null, 2)
      )
      
      console.log('✅ Created fallback media-refs.json file')
    } catch (writeError) {
      console.error('❌ Could not create fallback file:', writeError.message)
    }
  }
}

// Helper function to set nested object properties
function setNestedProperty(obj, path, value) {
  const keys = path.split('.')
  const lastKey = keys.pop()
  
  if (!lastKey) return
  
  const target = keys.reduce((current, key) => {
    if (!current[key]) current[key] = {}
    return current[key]
  }, obj)
  
  target[lastKey] = value
}

// Execute the function
generateMediaReferences().catch(console.error)
--- END OF FILE: ./scripts/generate-media-refs.js ---


--- START OF FILE: ./scripts/generate-translations.js ---
import { createClient } from '@sanity/client'
import { writeFileSync, mkdirSync, existsSync, readFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

// Get current directory for ES modules
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Simple .env.local loader
function loadEnvFile() {
  const envPath = join(process.cwd(), '.env.local')
  
  if (existsSync(envPath)) {
    const envContent = readFileSync(envPath, 'utf8')
    const lines = envContent.split('\n')
    
    lines.forEach(line => {
      const trimmed = line.trim()
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=')
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').replace(/^["']|["']$/g, '')
          process.env[key.trim()] = value.trim()
        }
      }
    })
    
    console.log('✅ Loaded environment variables from .env.local')
  } else {
    console.log('⚠️  .env.local file not found - using existing translations')
  }
}

// Load environment variables
loadEnvFile()

// Sanity client setup (with fallback)
let client = null

if (process.env.NEXT_PUBLIC_SANITY_PROJECT_ID && process.env.NEXT_PUBLIC_SANITY_DATASET) {
  client = createClient({
    projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
    dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,
    useCdn: false,
    apiVersion: '2024-01-01',
    token: process.env.SANITY_API_TOKEN
  })
}

async function generateTranslations() {
  console.log('🔄 Generating translations...')
  
  // Check if we can use Sanity
  if (!client) {
    console.log('📝 Sanity not configured - keeping existing translation files')
    console.log('💡 Your existing translations will continue to work')
    
    // Verify existing translation files exist
    const messagesDir = join(process.cwd(), 'messages')
    const enPath = join(messagesDir, 'en.json')
    const hiPath = join(messagesDir, 'hi.json')
    
    if (existsSync(enPath) && existsSync(hiPath)) {
      console.log('✅ Existing translation files found and ready to use')
      return
    } else {
      console.log('❌ No translation files found')
      console.log('🔧 Either set up Sanity or ensure translation files exist')
      return
    }
  }
  
  try {
    // Test Sanity connection
    console.log('🔍 Testing Sanity connection...')
    await client.fetch('*[_type == "translation"][0..1]')
    console.log('✅ Connected to Sanity!')

    // Fetch all translations from Sanity
    const translations = await client.fetch(`
      *[_type == "translation"] {
        key,
        english,
        hindi,
        category
      }
    `)

    console.log(`📊 Found ${translations.length} translations in Sanity`)

    if (translations.length === 0) {
      console.log('📝 No translations found in Sanity')
      console.log('💡 Keeping existing translation files')
      return
    }

    // Build nested translation objects
    const englishTranslations = {}
    const hindiTranslations = {}

    translations.forEach(({ key, english, hindi }) => {
      setNestedProperty(englishTranslations, key, english)
      setNestedProperty(hindiTranslations, key, hindi)
    })

    // Ensure messages directory exists
    const messagesDir = join(process.cwd(), 'messages')
    if (!existsSync(messagesDir)) {
      mkdirSync(messagesDir, { recursive: true })
    }

    // Write translation files
    writeFileSync(
      join(messagesDir, 'en.json'),
      JSON.stringify(englishTranslations, null, 2)
    )

    writeFileSync(
      join(messagesDir, 'hi.json'),
      JSON.stringify(hindiTranslations, null, 2)
    )

    console.log('✅ Translations generated successfully from Sanity!')
    console.log(`📄 Generated ${translations.length} translations`)

  } catch (error) {
    console.error('❌ Error fetching from Sanity:', error.message)
    console.log('📝 Keeping existing translation files')
    console.log('💡 Your website will continue to work with existing translations')
  }
}

// Helper function to set nested object properties
function setNestedProperty(obj, path, value) {
  const keys = path.split('.')
  const lastKey = keys.pop()
  
  if (!lastKey) return
  
  const target = keys.reduce((current, key) => {
    if (!current[key]) current[key] = {}
    return current[key]
  }, obj)
  
  target[lastKey] = value
}

// Execute the function
generateTranslations().catch(console.error)
--- END OF FILE: ./scripts/generate-translations.js ---


--- START OF FILE: ./scripts/import-existing-translations.js ---
// scripts/import-existing-translations.js
import { createClient } from '@sanity/client'
import { existsSync, readFileSync } from 'fs'
import { join } from 'path'

// Simple .env.local loader (no dependencies needed)
function loadEnvFile() {
  const envPath = join(process.cwd(), '.env.local')
  
  if (existsSync(envPath)) {
    const envContent = readFileSync(envPath, 'utf8')
    const lines = envContent.split('\n')
    
    lines.forEach(line => {
      const trimmed = line.trim()
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=')
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').replace(/^["']|["']$/g, '') // Remove quotes
          process.env[key.trim()] = value.trim()
        }
      }
    })
    
    console.log('✅ Loaded environment variables from .env.local')
  } else {
    console.log('⚠️  .env.local file not found')
  }
}

// Load environment variables
loadEnvFile()

// Debug: Check environment variables
console.log('\n🔍 Environment Variables Check:')
console.log('NEXT_PUBLIC_SANITY_PROJECT_ID:', process.env.NEXT_PUBLIC_SANITY_PROJECT_ID ? '✅ Found' : '❌ Missing')
console.log('NEXT_PUBLIC_SANITY_DATASET:', process.env.NEXT_PUBLIC_SANITY_DATASET ? '✅ Found' : '❌ Missing')
console.log('SANITY_API_TOKEN:', process.env.SANITY_API_TOKEN ? '✅ Found' : '❌ Missing')

// Validate required environment variables
if (!process.env.NEXT_PUBLIC_SANITY_PROJECT_ID) {
  console.error('\n❌ ERROR: Missing NEXT_PUBLIC_SANITY_PROJECT_ID')
  console.log('\n👉 SOLUTION: Create a .env.local file in your project root:')
  console.log('```')
  console.log('NEXT_PUBLIC_SANITY_PROJECT_ID=your-sanity-project-id')
  console.log('NEXT_PUBLIC_SANITY_DATASET=production')
  console.log('SANITY_API_TOKEN=your-sanity-api-token')
  console.log('```')
  console.log('\n📚 Need help? Follow these steps:')
  console.log('1. Go to https://sanity.io/manage')
  console.log('2. Create or select your project')
  console.log('3. Copy the Project ID from the dashboard')
  console.log('4. Go to API tab → Create API Token with Editor permissions')
  console.log('5. Create .env.local file with the values above')
  process.exit(1)
}

if (!process.env.NEXT_PUBLIC_SANITY_DATASET) {
  console.error('\n❌ ERROR: Missing NEXT_PUBLIC_SANITY_DATASET')
  console.log('👉 Add this to your .env.local file:')
  console.log('   NEXT_PUBLIC_SANITY_DATASET=production')
  process.exit(1)
}

// Create Sanity client
const client = createClient({
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,
  useCdn: false,
  apiVersion: '2024-01-01',
  token: process.env.SANITY_API_TOKEN || undefined
})

console.log('\n🔧 Sanity Client Configuration:')
console.log('Project ID:', process.env.NEXT_PUBLIC_SANITY_PROJECT_ID)
console.log('Dataset:', process.env.NEXT_PUBLIC_SANITY_DATASET)
console.log('API Token:', process.env.SANITY_API_TOKEN ? '✅ Configured' : '⚠️  Not configured (read-only mode)')

async function importExistingTranslations() {
  console.log('\n📥 Starting translation import...')
  
  try {
    // Test Sanity connection first
    console.log('🔍 Testing Sanity connection...')
    const testQuery = '*[_type == "translation"][0..1]'
    await client.fetch(testQuery)
    console.log('✅ Sanity connection successful!')

    // Read existing translation files
    const enPath = join(process.cwd(), 'messages', 'en.json')
    const hiPath = join(process.cwd(), 'messages', 'hi.json')
    
    console.log('\n📖 Looking for translation files...')
    console.log('English file:', existsSync(enPath) ? '✅ Found' : '❌ Missing')
    console.log('Hindi file:', existsSync(hiPath) ? '✅ Found' : '❌ Missing')
    
    if (!existsSync(enPath) || !existsSync(hiPath)) {
      throw new Error(`
❌ Translation files not found!

Expected files:
- ${enPath}
- ${hiPath}

Make sure these files exist before running the import.
      `)
    }

    const englishTranslations = JSON.parse(readFileSync(enPath, 'utf8'))
    const hindiTranslations = JSON.parse(readFileSync(hiPath, 'utf8'))

    // Flatten nested objects into key-value pairs
    const flatEnglish = flattenObject(englishTranslations)
    const flatHindi = flattenObject(hindiTranslations)

    // Create translation documents
    const translationDocs = []

    Object.keys(flatEnglish).forEach(key => {
      const category = key.split('.')[0]
      
      translationDocs.push({
        key,
        category,
        english: flatEnglish[key],
        hindi: flatHindi[key] || flatEnglish[key],
        description: `Auto-imported from existing translation files`
      })
    })

    console.log(`\n📊 Found ${translationDocs.length} translations to import`)

    // Check if we have write permissions
    if (!process.env.SANITY_API_TOKEN) {
      console.log('\n⚠️  WARNING: No API token provided')
      console.log('Running in read-only mode. To import translations, you need:')
      console.log('1. Create an API token in your Sanity dashboard with Editor permissions')
      console.log('2. Add SANITY_API_TOKEN=your-token to your .env.local file')
      console.log('3. Re-run this script')
      return
    }

    // Batch import to Sanity
    const batchSize = 50
    let imported = 0

    console.log('\n📤 Starting import process...')

    for (let i = 0; i < translationDocs.length; i += batchSize) {
      const batch = translationDocs.slice(i, i + batchSize)
      
      const sanityDocs = batch.map(doc => ({
        _type: 'translation',
        _id: `translation-${doc.key.replace(/\./g, '-')}`,
        ...doc
      }))

      console.log(`📤 Importing batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(translationDocs.length/batchSize)}...`)

      // Create or replace documents
      const transaction = client.transaction()
      sanityDocs.forEach(doc => {
        transaction.createOrReplace(doc)
      })

      await transaction.commit()
      imported += batch.length
      
      console.log(`✅ Progress: ${imported}/${translationDocs.length} translations imported`)
    }

    console.log('\n🎉 SUCCESS! All translations imported successfully!')
    console.log(`🔗 Access your Sanity Studio at: https://${process.env.NEXT_PUBLIC_SANITY_PROJECT_ID}.sanity.studio`)
    console.log('\n📝 Next steps:')
    console.log('1. Visit your Sanity Studio to verify the translations')
    console.log('2. Set up webhooks to auto-sync changes')
    console.log('3. Run "npm run generate-translations" to pull updates')
    
  } catch (error) {
    console.error('\n❌ Error importing translations:', error.message)
    
    if (error.message.includes('Unauthorized')) {
      console.log('\n🔑 Authentication Issue:')
      console.log('- Check your SANITY_API_TOKEN in .env.local')
      console.log('- Make sure the token has Editor or Admin permissions')
      console.log('- Verify the token is not expired')
    }
    
    if (error.message.includes('projectId')) {
      console.log('\n🔧 Configuration Issue:')
      console.log('- Check your NEXT_PUBLIC_SANITY_PROJECT_ID in .env.local')
      console.log('- Verify the project ID is correct')
      console.log('- Make sure .env.local file exists in project root')
    }
    
    console.log('\n🆘 Need help?')
    console.log('1. Verify your .env.local file exists and has correct values')
    console.log('2. Check your Sanity project settings')
    console.log('3. Or skip Sanity for now and continue with static translations')
    
    process.exit(1)
  }
}

// Helper function to flatten nested objects
function flattenObject(obj, prefix = '') {
  const flattened = {}
  
  Object.keys(obj).forEach(key => {
    const value = obj[key]
    const newKey = prefix ? `${prefix}.${key}` : key
    
    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
      Object.assign(flattened, flattenObject(value, newKey))
    } else if (typeof value === 'string') {
      flattened[newKey] = value
    }
  })
  
  return flattened
}

// Execute the import
importExistingTranslations().catch(console.error)
--- END OF FILE: ./scripts/import-existing-translations.js ---


--- START OF FILE: ./scripts/import-missing-translations.js ---
import { createClient } from '@sanity/client'
import { existsSync, readFileSync } from 'fs'
import { join } from 'path'

// Load environment variables
function loadEnvFile() {
  const envPath = join(process.cwd(), '.env.local')
  
  if (existsSync(envPath)) {
    const envContent = readFileSync(envPath, 'utf8')
    const lines = envContent.split('\n')
    
    lines.forEach(line => {
      const trimmed = line.trim()
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=')
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').replace(/^["']|["']$/g, '')
          process.env[key.trim()] = value.trim()
        }
      }
    })
  }
}

loadEnvFile()

// Create Sanity client
const client = createClient({
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,
  useCdn: false,
  apiVersion: '2024-01-01',
  token: process.env.SANITY_API_TOKEN
})

async function importMissingTranslations() {
  console.log('📥 Importing missing translation keys to Sanity...')
  
  try {
    // Read current translation files
    const enPath = join(process.cwd(), 'messages', 'en.json')
    const hiPath = join(process.cwd(), 'messages', 'hi.json')
    
    if (!existsSync(enPath) || !existsSync(hiPath)) {
      throw new Error('Translation files not found!')
    }

    const englishTranslations = JSON.parse(readFileSync(enPath, 'utf8'))
    const hindiTranslations = JSON.parse(readFileSync(hiPath, 'utf8'))

    // Flatten nested objects into key-value pairs
    const flatEnglish = flattenObject(englishTranslations)
    const flatHindi = flattenObject(hindiTranslations)

    // Create translation documents for missing keys
    const missingKeys = [
      // Contact form steps
      'contact.form.steps.0.title',
      'contact.form.steps.1.title',
      'contact.form.steps.2.title',
      
      // Gallery projects
      'galleryPage.projects.0.title',
      'galleryPage.projects.1.title',
      'galleryPage.projects.2.title',
      'galleryPage.projects.3.title',
      'galleryPage.projects.4.title',
      'galleryPage.projects.5.title',
      
      // Additional gallery projects
      ...Array.from({ length: 12 }, (_, i) => `galleryPage.additionalProjects.${i}.title`),
      ...Array.from({ length: 12 }, (_, i) => `galleryPage.additionalProjects.${i}.category`),
      
      // Testimonials reviews
      'testimonials.reviews.0.name',
      'testimonials.reviews.0.location',
      'testimonials.reviews.0.text',
      'testimonials.reviews.0.project',
      'testimonials.reviews.0.savings',
      'testimonials.reviews.1.name',
      'testimonials.reviews.1.location',
      'testimonials.reviews.1.text',
      'testimonials.reviews.1.project',
      'testimonials.reviews.1.savings',
      'testimonials.reviews.2.name',
      'testimonials.reviews.2.location',
      'testimonials.reviews.2.text',
      'testimonials.reviews.2.project',
      'testimonials.reviews.2.savings'
    ]

    const translationDocs = []

    missingKeys.forEach(key => {
      if (flatEnglish[key] && flatHindi[key]) {
        const category = key.split('.')[0]
        
        translationDocs.push({
          key,
          category,
          english: flatEnglish[key],
          hindi: flatHindi[key],
          description: `Missing translation key - auto-imported`
        })
      }
    })

    console.log(`📊 Found ${translationDocs.length} missing translations to import`)

    if (translationDocs.length === 0) {
      console.log('✅ No missing translations found - all keys exist!')
      return
    }

    // Batch import to Sanity
    const batchSize = 50
    let imported = 0

    for (let i = 0; i < translationDocs.length; i += batchSize) {
      const batch = translationDocs.slice(i, i + batchSize)
      
      const sanityDocs = batch.map(doc => ({
        _type: 'translation',
        _id: `translation-${doc.key.replace(/\./g, '-')}`,
        ...doc
      }))

      console.log(`📤 Importing batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(translationDocs.length/batchSize)}...`)

      const transaction = client.transaction()
      sanityDocs.forEach(doc => {
        transaction.createOrReplace(doc)
      })

      await transaction.commit()
      imported += batch.length
      
      console.log(`✅ Progress: ${imported}/${translationDocs.length} translations imported`)
    }

    console.log('\n🎉 SUCCESS! All missing translations imported to Sanity!')
    console.log('🔗 Now run: npm run generate-translations')
    
  } catch (error) {
    console.error('❌ Error importing missing translations:', error.message)
    process.exit(1)
  }
}

// Helper function to flatten nested objects
function flattenObject(obj, prefix = '') {
  const flattened = {}
  
  Object.keys(obj).forEach(key => {
    const value = obj[key]
    const newKey = prefix ? `${prefix}.${key}` : key
    
    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
      Object.assign(flattened, flattenObject(value, newKey))
    } else if (typeof value === 'string') {
      flattened[newKey] = value
    }
  })
  
  return flattened
}

// Execute the import
importMissingTranslations().catch(console.error)

--- END OF FILE: ./scripts/import-missing-translations.js ---


--- START OF FILE: ./scripts/validate-translations.js ---
import { createClient } from '@sanity/client'

const client = createClient({
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,
  useCdn: false,
  apiVersion: '2024-01-01',
  token: process.env.SANITY_API_TOKEN
})

async function validateTranslations() {
  console.log('🔍 Validating translations...')
  
  try {
    const translations = await client.fetch(`
      *[_type == "translation"] {
        key,
        english,
        hindi,
        variables
      }
    `)

    const issues = []

    translations.forEach(({ key, english, hindi, variables }) => {
      // Check for missing translations
      if (!english?.trim()) {
        issues.push(`❌ Missing English translation for: ${key}`)
      }
      if (!hindi?.trim()) {
        issues.push(`❌ Missing Hindi translation for: ${key}`)
      }

      // Check for variable consistency
      if (variables && variables.length > 0) {
        variables.forEach(variable => {
          const varPattern = `{${variable}}`
          if (english && !english.includes(varPattern)) {
            issues.push(`⚠️  Variable {${variable}} missing in English: ${key}`)
          }
          if (hindi && !hindi.includes(varPattern)) {
            issues.push(`⚠️  Variable {${variable}} missing in Hindi: ${key}`)
          }
        })
      }

      // Check for length discrepancies (Hindi might be longer)
      if (english && hindi && Math.abs(english.length - hindi.length) > 100) {
        issues.push(`📏 Large length difference in: ${key}`)
      }
    })

    if (issues.length === 0) {
      console.log('✅ All translations are valid!')
    } else {
      console.log('🚨 Translation Issues Found:')
      issues.forEach(issue => console.log(issue))
    }

    return issues.length === 0
  } catch (error) {
    console.error('❌ Error validating translations:', error)
    process.exit(1)
  }
}

// Execute validation
validateTranslations().catch(console.error)
--- END OF FILE: ./scripts/validate-translations.js ---


--- START OF FILE: ./studio/components/TranslationInput.jsx ---
import React from 'react';
import { TextArea, Stack, Text, Card } from '@sanity/ui';

export function TranslationInput(props) {
  const { value = '', onChange, schemaType } = props;
  
  return (
    <Stack space={3}>
      <TextArea
        value={value}
        onChange={(event) => onChange(event.target.value)}
        placeholder={schemaType.placeholder}
        rows={3}
      />
      {value && (
        <Card padding={3} tone="primary" border>
          <Text size={1}>
            Character count: {value.length}
            {value.length > 100 && ' (Consider shorter text for better UX)'}
          </Text>
        </Card>
      )}
    </Stack>
  );
}

--- END OF FILE: ./studio/components/TranslationInput.jsx ---


